import { createWorker } from 'tesseract.js'

// Kvitto-processor som anv√§nder OCR f√∂r att l√§sa produkter fr√•n kvitton
export class ReceiptProcessor {
  constructor() {
    this.worker = null
  }

  async initialize() {
    if (this.worker) return

    console.log('ü§ñ Initierar OCR-worker...')
    this.worker = await createWorker()
    await this.worker.loadLanguage('swe+eng') // Svenska och engelska
    await this.worker.initialize('swe+eng')
    
    // Optimera f√∂r kvitton
    await this.worker.setParameters({
      tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ√Ö√Ñ√ñabcdefghijklmnopqrstuvwxyz√•√§√∂0123456789.,:-‚Ç¨kr% ',
      tessedit_pageseg_mode: 6 // Uniform block of text
    })
    
    console.log('‚úÖ OCR-worker redo')
  }

  async processReceipt(imageElement) {
    try {
      await this.initialize()
      
      console.log('üì∏ L√§ser kvittobild...')
      const { data: { text } } = await this.worker.recognize(imageElement)
      
      console.log('üìù OCR-text:', text)
      
      // Extrahera produkter fr√•n texten
      const products = this.parseReceiptText(text)
      
      console.log('üì¶ Extraherade produkter:', products)
      return products
      
    } catch (error) {
      console.error('‚ùå OCR-fel:', error)
      throw error
    }
  }

  parseReceiptText(text) {
    const products = []
    const allLines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0)
    
    console.log('üìÑ Alla rader:', allLines)
    
    // Hitta produktsektionen mellan referensnummer och total
    const lines = this.extractProductSection(allLines)
    
    console.log('üéØ Produktsektion extraherad:', lines)
    
    // L√§s av ALLT i produktsektionen och l√•t AI avg√∂ra vad som √§r matvaror
    for (let line of lines) {
      console.log(`üîç Analyserar rad: "${line}"`)
      
      // F√∂rs√∂k extrahera produktinformation fr√•n denna rad
      const extractedProduct = this.extractProductFromLine(line)
      
      if (extractedProduct) {
        // Hantera b√•de enskilda produkter och arrays (kommaseparerade)
        const productsArray = Array.isArray(extractedProduct) ? extractedProduct : [extractedProduct]
        
        console.log(`‚úÖ Hittade ${productsArray.length} potentiella produkter:`, productsArray.map(p => p.name))
        
        for (const product of productsArray) {
          // Anv√§nd AI f√∂r att avg√∂ra om detta √§r en matvara
          if (this.isLikelyFoodProduct(product.name)) {
            products.push(product)
            console.log(`üçé L√§gger till matvara: ${product.name}`)
          } else {
            console.log(`üö´ Filtrerar bort icke-matvara: ${product.name}`)
          }
        }
      }
    }
    
    return products
  }

  extractProductSection(lines) {
    // Hitta start och slutmarkering f√∂r produktsektionen
    let startIndex = -1
    let endIndex = lines.length
    
    // Leta efter referensnummer eller liknande startmarkering
    const startPatterns = [
      /^Ref[\s.]*\d+/i,           // "Ref. 40392" eller "Ref 40392"
      /^\d{5,}/,                 // L√•ngt nummer som referens  
      /^Artikel/i,               // "Artikel" rubrik
      /^Vara/i,                  // "Vara" rubrik
      /^Produkt/i                // "Produkt" rubrik
    ]
    
    // Leta efter slutmarkering
    const endPatterns = [
      /^(Summa|Total|Sum)/i,     // "Summa", "Total", "Sum"
      /^(Att\s+betala)/i,        // "Att betala"
      /^(Moms|VAT)/i,            // Momssektion
      /^(Kort|Kontant|Card)/i,   // Betalningssektion
      /^\s*[-=]+\s*$/            // Linje med bara streck
    ]
    
    // Hitta startindex
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i]
      
      // Kolla startm√∂nster
      if (startPatterns.some(pattern => pattern.test(line))) {
        startIndex = i + 1 // B√∂rja EFTER startmarkeringen
        console.log(`üö¶ Produktsektion startar vid rad ${i + 1}: "${line}"`)
        break
      }
    }
    
    // Om ingen explicit start hittas, b√∂rja fr√•n b√∂rjan
    if (startIndex === -1) {
      startIndex = 0
      console.log('üîç Ingen startmarkering hittad - scannar fr√•n b√∂rjan')
    }
    
    // Hitta slutindex
    for (let i = startIndex; i < lines.length; i++) {
      const line = lines[i]
      
      // Kolla slutm√∂nster
      if (endPatterns.some(pattern => pattern.test(line))) {
        endIndex = i
        console.log(`üö© Produktsektion slutar vid rad ${i + 1}: "${line}"`)
        break
      }
    }
    
    // Extrahera produktsektionen
    const productLines = lines.slice(startIndex, endIndex)
    console.log(`üìã Extraherar rader ${startIndex + 1}-${endIndex} (${productLines.length} rader)`)
    
    return productLines
  }

  // Gener√∂s extraktion av produkter fr√•n kvittorader  
  extractProductFromLine(line) {
    // Hoppa √∂ver uppenbart icke-produktrader (men INTE * som kan vara produkter)
    const obviousIgnore = [
      /^\s*$/,                           // Tom rad
      /^[-=_]{3,}$/,                     // Bara streck/symboler (EJ * som kan vara produkter)
      /^\d{2}:\d{2}/,                    // Tid
      /^\d{4}-\d{2}-\d{2}/,              // Datum YYYY-MM-DD
      /^\d{2}[.\/\-]\d{2}[.\/\-]/,       // Datum DD.MM eller MM/DD
      /^(summa|total|sum|moms|vat|kort|kontant|swish|cash)$/i, // Kvitto-termer
      /^\d+[.,]\d{2}\s*kr?\s*$/,         // Bara pris
      /^(ref[\s.]*\d+|trans[\s.]*\d+)$/i // Referensnummer
    ]
    
    if (obviousIgnore.some(pattern => pattern.test(line))) {
      return null
    }
    
    // Gener√∂sa m√∂nster f√∂r att hitta produkter (med och utan priser)
    const productPatterns = [
      // Standard: "Produktnamn    12.50" eller "Produktnamn 12.50"
      /^(.+?)\s+(\d+[.,]\d{1,2})\s*kr?\s*$/i,
      
      // Med kvantitet: "Produktnamn 2st    25.00"
      /^(.+?)\s+\d+\s*(?:st|kg|g|L|cl|ml)\s+(\d+[.,]\d{1,2})\s*kr?\s*$/i,
      
      // Med multiplikation: "Produktnamn 2 x 12.50"
      /^(.+?)\s+\d+\s*x\s*(\d+[.,]\d{1,2})\s*kr?\s*$/i,
      
      // Pris f√∂rst: "12.50 Produktnamn"
      /^(\d+[.,]\d{1,2})\s*kr?\s+(.+)$/i,
      
      // ***NYTT*** Asterisk-format: "*Avokado", "*Lakritsmix", "*Svamp champinjon"
      /^\*\s*([a-zA-Z√•√§√∂√Ö√Ñ√ñ][a-zA-Z√•√§√∂√Ö√Ñ√ñ\s\-]{2,40})\s*$/i,
      
      // ***NYTT*** Produkter med komman: "Avokado, Lakritsmix, Svamp"
      /^([a-zA-Z√•√§√∂√Ö√Ñ√ñ][a-zA-Z√•√§√∂√Ö√Ñ√ñ\s\-,]{3,50})$/i,
      
      // Endast produktnamn (inget pris) - mer gener√∂s
      /^([a-zA-Z√•√§√∂√Ö√Ñ√ñ][a-zA-Z√•√§√∂√Ö√Ñ√ñ\s\d\-]{2,40})$/i
    ]
    
    for (let pattern of productPatterns) {
      const match = line.match(pattern)
      if (match) {
        let productName, price
        
        if (pattern.source.includes('^(\\d+')) {
          // Pris f√∂rst format
          price = parseFloat(match[1].replace(',', '.'))
          productName = match[2].trim()
        } else if (match[2] && /\d/.test(match[2])) {
          // Standard format med pris som match[2]
          productName = match[1].trim()
          price = parseFloat(match[2].replace(',', '.'))
        } else {
          // Endast produktnamn
          productName = match[1].trim()
          price = 0 // Ok√§nt pris
        }
        
        // Validera pris
        if (price > 0 && (price < 0.1 || price > 1000)) {
          continue // Orealistiskt pris
        }
        
        // Extrahera kvantitet innan rensning
        const originalText = match[0]
        const quantity = this.extractQuantity(originalText)
        const unit = this.extractUnit(originalText)
        
        // Rensa produktnamnet (ta bort * och extra mellanslag)
        let cleanedName = this.cleanProductName(productName)
        cleanedName = cleanedName.replace(/^\*\s*/, '').trim() // Ta bort * i b√∂rjan
        
        // Hantera kommaseparerade produkter ("Avokado, Lakritsmix, Svamp")
        if (cleanedName.includes(',')) {
          console.log(`üî™ Hittade kommaseparerade produkter: "${cleanedName}"`)
          const products = []
          const parts = cleanedName.split(',').map(p => p.trim()).filter(p => p.length > 2)
          
          for (const part of parts) {
            const partCleaned = this.cleanProductName(part)
            if (this.isValidProductName(partCleaned)) {
              products.push({
                name: partCleaned,
                price: price || 0,
                quantity: 1, // Varje del f√•r kvantitet 1
                unit: this.guessUnit(partCleaned)
              })
            }
          }
          
          return products // Returnera array av produkter
        }
        
        if (this.isValidProductName(cleanedName)) {
          return {
            name: cleanedName,
            price: price || 0,
            quantity: quantity || 1,
            unit: unit || this.guessUnit(cleanedName)
          }
        }
      }
    }
    
    return null
  }

  // Kraftfull OCR-felkorrektion och otydlighetshantering
  correctOCRErrors(text) {
    if (!text) return text
    
    // Vanliga OCR-fel och deras korrigeringar
    const ocrCorrections = {
      // Siffror som blir bokst√§ver
      '0': ['o', 'O'], '1': ['l', 'I', '|'], '5': ['s', 'S'], '8': ['B'], '6': ['G'],
      
      // Bokst√§ver som blir siffror
      'o': ['0'], 'l': ['1', 'I'], 's': ['5'], 'g': ['9'], 'z': ['2'],
      
      // Vanliga svenska bokstavsfel
      '√§': ['a', 'ae'], '√∂': ['o', 'oe'], '√•': ['a', 'aa'],
      'c': ['e'], 'e': ['c'], 'n': ['h'], 'h': ['n'], 'm': ['rn'],
      'u': ['v'], 'v': ['u'], 'w': ['vv'], 'k': ['lc'], 'g': ['q'],
      
      // Speciella tecken som f√∂rsvinner eller blir fel
      '\u00a0': ' ', '¬≠': '', '‚Äã': '', // Icke-synliga tecken
    }
    
    let corrected = text
    
    // Applicera korrigeringar
    for (const [correct, errors] of Object.entries(ocrCorrections)) {
      for (const error of errors) {
        corrected = corrected.replace(new RegExp(error, 'gi'), correct)
      }
    }
    
    return corrected
  }
  
  // Phonetic matching f√∂r svenska ord (Double Metaphone-inspirerad)
  getSoundex(word) {
    if (!word) return ''
    
    let soundex = word.toLowerCase()
      .replace(/[^√•√§√∂a-z]/g, '')
      // Svenska ljud
      .replace(/ck/g, 'k')
      .replace(/ch/g, 'sh')
      .replace(/sch/g, 'sh') 
      .replace(/tj/g, 'sh')
      .replace(/kj/g, 'sh')
      .replace(/sk/g, 'sh')
      .replace(/√§/g, 'e')
      .replace(/√∂/g, 'o')
      .replace(/√•/g, 'o')
      // Liknande ljud
      .replace(/[bp]/g, 'b')
      .replace(/[dt]/g, 't')
      .replace(/[kg]/g, 'k')
      .replace(/[fv]/g, 'f')
      .replace(/[sz]/g, 's')
      .replace(/[mn]/g, 'm')
      .replace(/[lr]/g, 'l')
      
    return soundex.substring(0, 4)
  }
  
  // Kontextuell intelligens f√∂r produktgissning
  findBestMatch(garbledText, candidates) {
    const garbled = garbledText.toLowerCase().trim()
    let bestMatch = null
    let bestScore = 0
    
    for (const candidate of candidates) {
      const cand = candidate.toLowerCase()
      let score = 0
      
      // Exakt match
      if (garbled === cand) return candidate
      
      // Substring match
      if (garbled.includes(cand) || cand.includes(garbled)) {
        score += 0.8
      }
      
      // Fuzzy match med Levenshtein
      const similarity = 1 - (this.levenshteinDistance(garbled, cand) / Math.max(garbled.length, cand.length))
      score += similarity * 0.6
      
      // Phonetic match
      if (this.getSoundex(garbled) === this.getSoundex(cand)) {
        score += 0.4
      }
      
      // F√∂rsta bokst√§ver matchar
      if (garbled[0] === cand[0]) {
        score += 0.2
      }
      
      // Samma l√§ngd ger bonus
      if (Math.abs(garbled.length - cand.length) <= 2) {
        score += 0.1
      }
      
      if (score > bestScore) {
        bestScore = score
        bestMatch = candidate
      }
    }
    
    return bestScore > 0.5 ? bestMatch : null
  }
  
  // Avancerad AI f√∂r s√∂ml√∂s produktigenk√§nning med otydlighetshantering
  isLikelyFoodProduct(productName) {
    if (!productName || productName.length < 2) return false
    
    // F√∂rst korrigera OCR-fel
    const correctedName = this.correctOCRErrors(productName)
    const name = correctedName.toLowerCase().trim()
    
    // Definitivt INTE matvaror (h√∂g precision med fuzzy matching)
    const definitelyNotFood = [
      'p√•se', 'plastp√•se', 'kasse', 'b√§rare', 'pappersp√•se', 'shopping', 'bag',
      'diskmedel', 'tv√§ttmedel', 'st√§d', 'reng√∂ring', 'kemikalie', 'spray',
      'tandkr√§m', 'tandborste', 'schampo', 'tv√•l', 'deodorant', 'shampoo',
      'batterier', 'gl√∂dlampa', 'tidning', 'magasin', 'present', 'g√•va',
      'blommor', 'v√§xt', 'leksak', 'cigaretter', 'tobak', 'lighter',
      'verktyg', 'skruv', 'spik', 'j√§rn', 'plast', 'metall', 'elektronik'
    ]
    
    // Fuzzy matching f√∂r icke-matvaror
    if (definitelyNotFood.some(item => this.fuzzyMatch(name, item, 0.8))) {
      console.log(`üö´ Fuzzy match icke-matvara: "${productName}"`)
      return false
    }
    
    // Omfattande matvaruindikatorer med svenska termer, varum√§rken och synonymer
    const foodIndicators = [
      // Frukt & gr√∂nt (svenska och internationella namn)
      '√§pple', 'apple', 'p√§ron', 'pears', 'banan', 'banana', 'apelsin', 'orange', 
      'citron', 'lemon', 'lime', 'kiwi', 'mango', 'ananas', 'pineapple',
      'vindruv', 'grapes', 'melon', 'vattenmelon', 'watermelon', 'cantaloupe',
      'jordgubb', 'strawberry', 'hallon', 'raspberry', 'bl√•b√§r', 'blueberry', 
      'lingon', 'cranberry', 'bj√∂rnb√§r', 'blackberry', 'vinb√§r', 'currant',
      'tomat', 'tomato', 'gurka', 'cucumber', 'paprika', 'pepper', 'chili',
      'l√∂k', 'onion', 'r√∂dl√∂k', 'vitl√∂k', 'garlic', 'morot', 'carrot', 
      'potatis', 'potato', 's√∂tpotatis', 'sweet potato', 'rotselleri', 'celery',
      'broccoli', 'blomk√•l', 'cauliflower', 'k√•l', 'cabbage', 'vitk√•l', 'r√∂dk√•l',
      'sallad', 'lettuce', 'iceberg', 'rucola', 'arugula', 'spenat', 'spinach',
      'dill', 'persilja', 'parsley', 'basilika', 'basil', 'oregano', 'timjan', 'thyme',
      'purjol√∂k', 'leek', 'selleri', 'r√§disa', 'radish', 'r√∂dbetor', 'beetroot',
      'palsternacka', 'parsnip', 'k√•lrot', 'swede', 'pumpa', 'pumpkin',
      'zucchini', 'squash', 'aubergine', 'eggplant', 'avokado', 'avocado',
      // Svamp
      'svamp', 'mushroom', 'champinjon', 'champignon', 'kantarell', 'shiitake',
      
      // K√∂tt & chark (svenska termer + varum√§rken)
      'k√∂tt', 'meat', 'n√∂tk√∂tt', 'beef', 'fl√§sk', 'pork', 'lamm', 'lamb',
      'kyckling', 'chicken', 'kalkon', 'turkey', 'and', 'duck', 'g√•s', 'goose',
      'korv', 'sausage', 'prinskorv', 'falukorv', 'salami', 'chorizo', 'pepperoni',
      'skinka', 'ham', 'bacon', 'fl√§sk', 'kassler', 'r√∂kt', 'smoked',
      'k√∂ttbullar', 'meatballs', 'k√∂ttf√§rs', 'mince', 'f√§rs', 'ground',
      'fl√§skfil√©', 'pork tenderloin', 'n√∂tfil√©', 'beef fillet', 'entrecote',
      'kyckling', 'kycklingfil√©', 'chicken breast', 'kycklingl√•r', 'chicken thigh',
      // Svenska k√∂ttvarum√§rken
      'scan', 'danish crown', 'kr√∂nj√§garen', 'lev√§ngers', 'gunnarsh√∂g',
      
      // Fisk & skaldjur
      'fisk', 'lax', 'torsk', 'sill', 'makrill', 'tonfisk', 'r√§kor', 'kr√§ftor',
      'musslor', 'hummer', 'krabba', 'abborre', 'g√§dda',
      
      // Mejeri (svenska termer + varum√§rken)
      'mj√∂lk', 'milk', 'standardmj√∂lk', 'mellanmj√∂lk', 'l√§ttmj√∂lk', 'minimj√∂lk',
      'havremj√∂lk', 'oat milk', 'mandelmj√∂lk', 'almond milk', 'sojamj√∂lk', 'soy milk',
      'gr√§dde', 'cream', 'vispgr√§dde', 'whipping cream', 'matlagningsgr√§dde',
      'filmj√∂lk', 'soured milk', 'kefir', 'buttermilk', 'k√§rnmj√∂lk',
      'yoghurt', 'yogurt', 'naturell', 'natural', 'grekisk', 'greek', 'probiotisk',
      'kvarg', 'quark', 'cottage cheese', 'keso', 'ricotta',
      // Osttyper
      'ost', 'cheese', 'cheddar', 'gouda', 'brie', 'camembert', 'roquefort',
      'herrg√•rd', 'pr√§st', 'v√§sterbotten', 'gr√§dd', 'h√•rd', 'mj√∂lk',
      'mozzarella', 'parmesan', 'feta', 'getost', 'chevre', 'blue cheese',
      // Sm√∂r & margarin
      'sm√∂r', 'butter', 'margarin', 'margarine', 'bregott', 'flora', 'l√§tta',
      'cr√®me fraiche', 'philadelphia', 'sourcream', 'gr√§ddfil',
      // Svenska mejerivarum√§rken
      'arla', 'sk√•nemejerier', 'norrmejerier', 'falsterbo', 'l√§ngk√§rra',
      'krono', 'milko', 'garant', 'eldorado',
      
      // √Ñgg
      '√§gg', 'h√∂ns√§gg', 'ekologiska √§gg',
      
      // Br√∂d & spannm√•l
      'br√∂d', 'skogaholm', 'polarbr√∂d', 'limpa', 'tunnbr√∂d', 'kn√§ckebr√∂d',
      'pasta', 'spagetti', 'makaroner', 'penne', 'fusilli', 'lasagne',
      'ris', 'jasminris', 'basmatiris', 'risotto', 'bulgur', 'quinoa', 'couscous',
      'havregryn', 'm√ºsli', 'flingor', 'cornflakes', 'special k',
      'mj√∂l', 'vetemj√∂l', 'graham', 'dinkel',
      
      // Konserver & torrvaror
      'krossad', 'passata', 'tomater', 'b√∂nor', 'kidneyb√∂nor', 'vita b√∂nor',
      'linser', '√§rtor', 'kik√§rtor', 'mais', 'oliver',
      'n√∂tter', 'mandel', 'valn√∂tter', 'cashew', 'pistasch', 'jordn√∂tter',
      'russin', 'dadlar', 'fikon', 'aprikoser',
      
      // Kryddor & s√•ser
      'salt', 'peppar', 'krydda', 'oregano', 'basilika', 'rosmarin', 'timjan',
      'kanel', 'kardemumma', 'ingef√§ra', 'curry', 'paprikapulver', 'chili',
      'ketchup', 'senap', 'majonn√§s', 'sojas√•s', 'tabasco', 'sriracha',
      'olja', 'olivolja', 'rapsolja', 'solrosolja', 'kokosolja',
      'vin√§ger', 'balsamico', '√§ppelcidervin√§ger',
      
      // S√∂tsaker & bakning
      'socker', 'florsocker', 'farinsocker', 'honung', 'sirap', 'l√∂nnsirap',
      'vanilj', 'vaniljsocker', 'bakpulver', 'j√§st', 'kakao',
      'choklad', 'marabou', 'fazer', 'lindt', 'godis', 'l√∂sgodis',
      'kex', 'digestive', 'maria', 'ballerina', 'g√∂teborgs',
      
      // Drycker (med svenska varum√§rken)
      'juice', '√§ppeljuice', 'apelsinjuice', 'tranb√§rsjuice', 'ananasjuice',
      'bravo', 'tropicana', 'god morgon', 'froosh', 'innocent', 'r√•juice',
      'l√§sk', 'coca cola', 'pepsi', 'sprite', 'fanta', 'festis', 'julmust',
      '7up', 'mirinda', 'schweppes', 'trocadero', 'pommac', 'champis',
      'vatten', 'mineralvatten', 'raml√∂sa', 'loka', 'evian', 'bonaqua',
      'k√§llvatten', 'naturell', 'kolsyrat', 'still', 'sparkling',
      // Varma drycker
      'kaffe', 'coffee', 'espresso', 'cappuccino', 'latte', 'americano',
      'gevalia', 'l√∂fbergs', 'zoegas', 'arvid nordquist', 'classic',
      'te', 'tea', 'earl grey', 'gr√∂n te', 'green tea', 'rooibos', 'chai',
      'lipton', 'tetley', 'twinings', '√∂rtte', 'kusmi',
      // Alkohol
      '√∂l', 'beer', 'folk√∂l', 'l√§tt√∂l', 'stark√∂l', 'ipa', 'lager',
      'carlsberg', 'heineken', 'stella artois', 'brooklyn', 'spendrups',
      'vin', 'wine', 'r√∂dvin', 'red wine', 'vitt vin', 'white wine',
      'ros√©', 'champagne', 'prosecco', 'cava', 'sprit', 'vodka', 'whiskey',
      
      // Br√∂d & bakverk (svenska varum√§rken)
      'br√∂d', 'bread', 'limpa', 'tunnbr√∂d', 'kn√§ckebr√∂d', 'rye bread',
      'polarbr√∂d', 'skogaholm', 'wasa', 'leksands', 'fin crisp', 'ryvita',
      'hamburgerbr√∂d', 'toast', 'bagel', 'croissant', 'scones', 'muffins',
      
      // S√∂tsaker & snacks (svenska varum√§rken)
      'choklad', 'chocolate', 'marabou', 'fazer', 'lindt', 'toblerone',
      'godis', 'candy', 'l√∂sgodis', 'haribo', 'malaco', 'cloetta',
      'lakrits', 'lakritsmix', 'licorice', 'salmiak', 'djungelvraal',
      'kex', 'cookies', 'digestive', 'maria', 'ballerina', 'g√∂teborgs',
      'chips', 'estrella', 'oj√§', 'taffel', 'pringles', 'cheez doodles',
      'popcorn', 'n√∂tter', 'nuts', 'mandel', 'cashew', 'pistasch',
      
      // Fryst & glass
      'fryst', 'frozen', 'frysta', 'k√∂ttbullar', 'pizza', 'pannkakor',
      'glass', 'ice cream', 'magnum', 'ben jerry', 'h√§agen dazs', 'gb',
      'struts', '88:an', 'nogger', 'cornetto', 'p√§ron split',
      
      // Kryddor & s√•ser (svenska varum√§rken)
      'krydda', 'spice', 'santa maria', 'ica basic', 'garant',
      'ketchup', 'senap', 'mustard', 'majonn√§s', 'mayonnaise', 'felix',
      'sojas√•s', 'soy sauce', 'sriracha', 'tabasco', 'worcester',
      
      // Specialkost & h√§lsa
      'glutenfri', 'gluten free', 'laktosfri', 'lactose free', 'vegansk', 'vegan',
      'vegetarisk', 'vegetarian', 'eko', 'organic', 'krav', 'f√§rsk', 'fresh',
      'naturell', 'natural', 'h√§lsokost', 'superfood', 'protein',
      
      // Barnmat
      'baby', 'barnmat', 'baby food', 'v√§lling', 'gr√∂t', 'porridge',
      'semper', 'nestle', 'follow', 'hipp', 'bl√•dra', 'n√§ringsdryck',
      
      // Fisk & skaldjur (ut√∂kade)
      'fisk', 'fish', 'lax', 'salmon', 'torsk', 'cod', 'sill', 'herring',
      'makrill', 'mackerel', 'tonfisk', 'tuna', 'r√§kor', 'shrimp',
      'kr√§ftor', 'crayfish', 'musslor', 'mussels', 'ostron', 'oysters'
    ]
    
    // Anv√§nd avancerad produktanalys
    const analysis = this.analyzeProductName(correctedName)
    
    // Intelligent matching med flera metoder
    
    // 1. Direkta fuzzy matches mot matvaruindikatorer
    const fuzzyMatches = foodIndicators.filter(indicator => 
      this.fuzzyMatch(name, indicator, 0.6)
    )
    
    if (fuzzyMatches.length > 0) {
      console.log(`üéØ Fuzzy match matvaror: ${fuzzyMatches.join(', ')} f√∂r "${productName}" (korrigerat: "${correctedName}")`)
      return true
    }
    
    // 2. Intelligent best match med OCR-korrektion
    const bestMatch = this.findBestMatch(name, foodIndicators)
    if (bestMatch) {
      console.log(`ü§ñ Intelligent match: "${productName}" ‚Üí "${bestMatch}" (OCR-korrigerat: "${correctedName}")`)
      return true
    }
    
    // 3. Partiell matching - hitta delar av ord
    const partialMatches = foodIndicators.filter(indicator => {
      const parts = name.split(/[\s\-_]+/)
      return parts.some(part => part.length > 2 && indicator.includes(part))
    })
    
    if (partialMatches.length > 0) {
      console.log(`üìç Partiell match: "${productName}" matchar delar av [${partialMatches.join(', ')}]`)
      return true
    }
    
    // 4. Kontextuell inferens baserat p√• ordstruktur
    const contextualClues = this.analyzeWordStructure(name)
    if (contextualClues.isFoodLike) {
      console.log(`üîç Kontextuell inferens: "${productName}" har matvaruliknande struktur (${contextualClues.reasons.join(', ')})`)
      return true
    }
    
    // 5. Anv√§nd AI-analys med konfidensgrad
    if (analysis.confidence >= 0.3) { // S√§nkt tr√∂skel f√∂r mer gener√∂s matching
      console.log(`ü§ñ AI-analys: ${Math.round(analysis.confidence * 100)}% s√§ker p√• "${productName}" (${analysis.categories.join(', ')})`);
      return true
    }
    
    // Varum√§rke ger h√∂g troliga
    if (analysis.brandMatch) {
      console.log(`üéÜ K√§nt varum√§rke "${analysis.brandMatch}" f√∂r "${productName}"`);
      return true
    }
    
    // Heuristik f√∂r svenska matvarunamn
    if (name.length <= 15) {
      const foodEndings = ['mj√∂lk', 'ost', 'k√∂tt', 'fisk', 'br√∂d', 'juice', 'gryn', 'olja']
      if (foodEndings.some(ending => name.endsWith(ending))) {
        console.log(`üîç Matvarusuffix hittad i "${productName}"`);
        return true
      }
    }
    
    // Generisk produktnamns-heuristik (l√§gre tr√∂skel f√∂r s√∂ml√∂s upplevelse)
    if (name.match(/^[a-z√•√§√∂\s-]{3,20}$/i) && !name.match(/\d{3,}/)) {
      console.log(`‚ùì Os√§ker men till√•ter: "${productName}" (anv√§ndaren avg√∂r)`);
      return true  // Mer gener√∂s f√∂r s√∂ml√∂s upplevelse
    }
    
    console.log(`üö´ Filtrerar definitivt bort: "${productName}"`);
    return false
  }

  // Fuzzy string matching f√∂r intelligent produktigenk√§nning
  fuzzyMatch(str1, str2, threshold = 0.7) {
    if (!str1 || !str2) return false
    
    const s1 = str1.toLowerCase().trim()
    const s2 = str2.toLowerCase().trim()
    
    // Exakt match
    if (s1 === s2) return true
    
    // Substring match
    if (s1.includes(s2) || s2.includes(s1)) return true
    
    // Levenshtein distance f√∂r fuzzy matching
    const distance = this.levenshteinDistance(s1, s2)
    const maxLen = Math.max(s1.length, s2.length)
    const similarity = 1 - (distance / maxLen)
    
    return similarity >= threshold
  }
  
  // Levenshtein distance algoritm
  levenshteinDistance(str1, str2) {
    const matrix = []
    
    for (let i = 0; i <= str2.length; i++) {
      matrix[i] = [i]
    }
    
    for (let j = 0; j <= str1.length; j++) {
      matrix[0][j] = j
    }
    
    for (let i = 1; i <= str2.length; i++) {
      for (let j = 1; j <= str1.length; j++) {
        if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
          matrix[i][j] = matrix[i - 1][j - 1]
        } else {
          matrix[i][j] = Math.min(
            matrix[i - 1][j - 1] + 1, // substitution
            matrix[i][j - 1] + 1,     // insertion
            matrix[i - 1][j] + 1      // deletion
          )
        }
      }
    }
    
    return matrix[str2.length][str1.length]
  }
  
  // Intelligent produktnamnsanalys med NLP-liknande tekniker
  analyzeProductName(name) {
    const analysis = {
      originalName: name,
      confidence: 0,
      foodProbability: 0,
      categories: [],
      brandMatch: null,
      cleanedName: this.cleanProductName(name)
    }
    
    const lowerName = name.toLowerCase()
    
    // Kategoriklassificering
    const categories = {
      'frukt_gront': ['frukt', 'gr√∂n', 'sallad', 'tomat', 'gurka', 'potatis'],
      'mejeri': ['mj√∂lk', 'ost', 'yoghurt', 'sm√∂r', 'gr√§dde'],
      'kott_fisk': ['k√∂tt', 'fisk', 'kyckling', 'korv', 'skinka'],
      'brod_spannmal': ['br√∂d', 'pasta', 'ris', 'havregryn'],
      'drycker': ['juice', 'l√§sk', 'vatten', 'kaffe', 'te'],
      'godis_snacks': ['choklad', 'godis', 'chips', 'kex']
    }
    
    for (const [category, keywords] of Object.entries(categories)) {
      if (keywords.some(keyword => lowerName.includes(keyword))) {
        analysis.categories.push(category)
        analysis.foodProbability += 0.2
      }
    }
    
    // Varum√§rkesigenk√§nning
    const brands = ['arla', 'fazer', 'marabou', 'felix', 'scan', 'ica', 'coop']
    for (const brand of brands) {
      if (lowerName.includes(brand)) {
        analysis.brandMatch = brand
        analysis.foodProbability += 0.3
        break
      }
    }
    
    // Specialmarkeringar
    const specialMarkers = ['eko', 'krav', 'glutenfri', 'laktosfri']
    if (specialMarkers.some(marker => lowerName.includes(marker))) {
      analysis.foodProbability += 0.2
    }
    
    analysis.confidence = Math.min(analysis.foodProbability, 1.0)
    
    return analysis
  }
  
  // Kontextuell ordstrukturanalys f√∂r att gissa om n√•got √§r mat
  analyzeWordStructure(name) {
    const analysis = {
      isFoodLike: false,
      reasons: []
    }
    
    if (!name || name.length < 3) return analysis
    
    const lowerName = name.toLowerCase()
    
    // Svenska matvarusuffix
    const foodSuffixes = ['k√∂tt', 'fisk', 'mj√∂lk', 'br√∂d', 'ost', 'juice', 'olja', 'gryn', 'mj√∂l']
    if (foodSuffixes.some(suffix => lowerName.endsWith(suffix))) {
      analysis.isFoodLike = true
      analysis.reasons.push('har matsuffix')
    }
    
    // Svenska matvaruprefix
    const foodPrefixes = ['fisk', 'k√∂tt', 'frukt', 'gr√∂nt', 'mejeri']
    if (foodPrefixes.some(prefix => lowerName.startsWith(prefix))) {
      analysis.isFoodLike = true
      analysis.reasons.push('har matprefix')
    }
    
    // Sammansatta ord med matvardelar
    const foodParts = ['√§pple', 'k√∂tt', 'mj√∂lk', 'ost', 'br√∂d', 'fisk', 'kyckling']
    const words = lowerName.split(/[\s-]+/)
    if (words.some(word => foodParts.includes(word))) {
      analysis.isFoodLike = true
      analysis.reasons.push('inneh√•ller matvarsdel')
    }
    
    // Typiska svenska matvaruord-m√∂nster
    if (lowerName.match(/^[a-z√•√§√∂]{4,15}$/)) {
      // Enkla ord utan siffror - ofta matvaror
      if (!lowerName.match(/(disk|st√§d|kemisk|plast|metall|elektronik)/)) {
        analysis.isFoodLike = true
        analysis.reasons.push('enkelt svenskt ord')
      }
    }
    
    // Dubbla vokaler (svenska m√∂nster)
    if (lowerName.match(/[aeiou√•√§√∂]{2,}/)) {
      analysis.isFoodLike = true
      analysis.reasons.push('dubbla vokaler')
    }
    
    // Typiska svenska slutljud
    if (lowerName.match(/(ning|het|skap|dom)$/)) {
      analysis.isFoodLike = false // Dessa √§r s√§llan mat
    } else if (lowerName.match(/(or|ar|er|ad|at)$/)) {
      analysis.isFoodLike = true
      analysis.reasons.push('svenskt ordslut')
    }
    
    return analysis
  }

  cleanProductName(name) {
    if (!name) return ''
    
    // F√∂rst korrigera OCR-fel
    let cleaned = this.correctOCRErrors(name)
    
    // Ta bort vanliga kvitto-prefix/suffix och kvantiteter
    cleaned = cleaned
      .replace(/^\d+\s*x?\s*/i, '') // Ta bort "2x" eller "3 st" i b√∂rjan
      .replace(/\s*\d+\s*st\s*$/i, '') // Ta bort "2 st" i slutet  
      .replace(/\s*\d+\s*kg\s*$/i, '') // Ta bort "1 kg" i slutet
      .replace(/\s*\d+[.,]\d+\s*kg\s*$/i, '') // Ta bort "1,5 kg" i slutet
      .replace(/\s*\d+\s*g\s*$/i, '') // Ta bort "500 g" i slutet
      .replace(/\s*\d+\s*L\s*$/i, '') // Ta bort "1 L" i slutet
      .replace(/\s*\d+[.,]\d+\s*L\s*$/i, '') // Ta bort "1,5 L" i slutet
      .replace(/\s*\d+\s*cl\s*$/i, '') // Ta bort "33 cl" i slutet
      .replace(/\s*\d+\s*ml\s*$/i, '') // Ta bort "250 ml" i slutet
      .replace(/\s*\d+[.,]\d{2}\s*kr?\s*$/i, '') // Ta bort pris i slutet
      .replace(/\s*\*\s*\d+[.,]\d{2}\s*$/i, '') // Ta bort "* 19,90" format
      .replace(/[*\^\~\`]+/g, '') // Ta bort diverse symboler som kan komma fr√•n OCR
      .replace(/[\u00a0\u2000-\u200f\u2028-\u202f]/g, ' ') // Ta bort konstiga mellanslag
      .replace(/\s+/g, ' ') // Normalisera mellanslag
      .replace(/[^a-zA-Z√•√§√∂√Ö√Ñ√ñ\s\-]/g, '') // Ta bort konstiga tecken, beh√•ll bara bokst√§ver
      .trim()
      .toLowerCase() // Normalisera till gemener
      .replace(/^(\w)/, (match) => match.toUpperCase()) // Stor bokstav f√∂rst
    
    // Extra validering och korrektion
    if (cleaned.length < 2) return name // Returnera original om f√∂r kort
    
    return cleaned
  }

  extractQuantity(text) {
    // Extrahera kvantitet fr√•n olika kvittoformat
    const patterns = [
      // "2x Mj√∂lk" eller "3 x √Ñpplen"
      /(\d+)\s*x\s*/i,
      // "Gurka 2st" eller "2 st Tomat"
      /(?:^|\s)(\d+)\s*st(?:\s|$)/i,
      // "Potatis 1kg" eller "1,5 kg Fisk"
      /(\d+(?:[.,]\d+)?)\s*kg/i,
      // "Mj√∂lk 1L" eller "0,5 L Gr√§dde"
      /(\d+(?:[.,]\d+)?)\s*L/i,
      // "Juice 33cl" eller "250 ml Gr√§dde"
      /(\d+)\s*(?:cl|ml)/i,
      // "500g K√∂tt" 
      /(\d+)\s*g/i,
      // Fallback: nummer i b√∂rjan som "3 Bananer"
      /^(\d+)\s+[a-z√•√§√∂]/i
    ]
    
    for (const pattern of patterns) {
      const match = text.match(pattern)
      if (match) {
        const value = parseFloat(match[1].replace(',', '.'))
        console.log(`üî¢ Extraherad kvantitet: ${value} fr√•n "${text}"`)
        return value
      }
    }
    
    return null
  }
  
  extractUnit(text) {
    const lowerText = text.toLowerCase()
    
    // F√∂rst kolla explicita enheter i texten
    const unitPatterns = [
      { pattern: /\d+(?:[.,]\d+)?\s*(kg)/i, unit: 'kg' },
      { pattern: /\d+(?:[.,]\d+)?\s*(g)(?:\s|$)/i, unit: 'g' },
      { pattern: /\d+(?:[.,]\d+)?\s*(L)/i, unit: 'L' },
      { pattern: /\d+\s*(cl)/i, unit: 'cl' },
      { pattern: /\d+\s*(ml)/i, unit: 'ml' },
      { pattern: /\d+\s*(st)(?:\s|$)/i, unit: 'st' }
    ]
    
    // Kolla f√∂r explicita enheter f√∂rst
    for (const { pattern, unit } of unitPatterns) {
      if (pattern.test(text)) {
        console.log(`üìé Extraherad explicit enhet: ${unit} fr√•n "${text}"`)
        return unit
      }
    }
    
    // Om "2x" format, gissa r√§tt enhet baserat p√• produkttyp
    if (/\d+\s*x\s*/i.test(text)) {
      // V√§tskor ska vara i liter √§ven om det st√•r "2x Mj√∂lk"
      if (lowerText.includes('mj√∂lk') || lowerText.includes('juice') || 
          lowerText.includes('l√§sk') || lowerText.includes('vatten') ||
          lowerText.includes('gr√§dde') || lowerText.includes('filmj√∂lk') ||
          lowerText.includes('√∂l') || lowerText.includes('vin')) {
        console.log(`ü•õ V√§tska med 'x' format - anv√§nder L: "${text}"`)
        return 'L'
      }
      
      // K√∂tt/ost i kg
      if (lowerText.includes('k√∂tt') || lowerText.includes('ost') || 
          lowerText.includes('skinka') || lowerText.includes('korv') ||
          lowerText.includes('fisk') || lowerText.includes('kyckling')) {
        console.log(`ü•© K√∂tt/ost med 'x' format - anv√§nder kg: "${text}"`)
        return 'kg'
      }
      
      // Annars styck
      console.log(`üìé 'x' format - anv√§nder st: "${text}"`)
      return 'st'
    }
    
    return null
  }

  guessUnit(productName) {
    const name = productName.toLowerCase()
    
    // V√§tskor - ALLTID i liter
    if (name.includes('mj√∂lk') || name.includes('juice') || name.includes('l√§sk') || 
        name.includes('√∂l') || name.includes('vin') || name.includes('vatten') ||
        name.includes('gr√§dde') || name.includes('filmj√∂lk') || name.includes('yoghurt') ||
        name.includes('kefir') || name.includes('smoothie')) {
      console.log(`ü•õ Gissar enhet L f√∂r v√§tska: ${productName}`)
      return 'L'
    }
    
    // K√∂tt/fisk/ost - i kg (eller g f√∂r mindre m√§ngder)
    if (name.includes('k√∂tt') || name.includes('ost') || name.includes('skinka') || 
        name.includes('korv') || name.includes('fisk') || name.includes('kyckling') ||
        name.includes('n√∂t') || name.includes('fl√§sk') || name.includes('bacon') ||
        name.includes('lax') || name.includes('torsk') || name.includes('r√§ka')) {
      console.log(`ü•© Gissar enhet kg f√∂r k√∂tt/fisk: ${productName}`)
      return 'kg'
    }
    
    // L√∂sviktsvaror - frukt/gr√∂nsaker i kg
    if (name.includes('tomat') || name.includes('potatis') || name.includes('√§pple') || 
        name.includes('banan') || name.includes('gurka') || name.includes('morot') ||
        name.includes('l√∂k') || name.includes('paprika') || name.includes('avokado') ||
        name.includes('citron') || name.includes('apelsin') || name.includes('p√§ron') ||
        name.includes('sallad') || name.includes('broccoli') || name.includes('blomk√•l')) {
      console.log(`ü•¶ Gissar enhet kg f√∂r frukt/gr√∂nsaker: ${productName}`)
      return 'kg'
    }
    
    // Torrvaror som s√§ljs i kg
    if (name.includes('ris') || name.includes('pasta') || name.includes('mj√∂l') ||
        name.includes('socker') || name.includes('n√∂tter') || name.includes('mandel')) {
      console.log(`üåæ Gissar enhet kg f√∂r torrvara: ${productName}`)
      return 'kg'
    }
    
    // Br√∂d och bakvaror - per styck
    if (name.includes('br√∂d') || name.includes('kaka') || name.includes('bulle') ||
        name.includes('muffin') || name.includes('t√•rta') || name.includes('kex')) {
      console.log(`üçû Gissar enhet st f√∂r bakvara: ${productName}`)
      return 'st'
    }
    
    // Konserver och f√∂rpackningar - per styck
    if (name.includes('burk') || name.includes('konserv') || name.includes('f√∂rpackning') ||
        name.includes('t√•rta') || name.includes('pizza')) {
      console.log(`ü•´ Gissar enhet st f√∂r f√∂rpackning: ${productName}`)
      return 'st'
    }
    
    // √Ñgg - per styck eller f√∂rpackning
    if (name.includes('√§gg')) {
      console.log(`ü•ö Gissar enhet st f√∂r √§gg: ${productName}`)
      return 'st'
    }
    
    // Standard fallback
    console.log(`‚ùì Ok√§nd produkttyp - anv√§nder st som fallback: ${productName}`)
    return 'st'
  }

  isValidProductName(name) {
    // Kolla att det verkar vara ett riktigt produktnamn
    return name.length > 2 && 
           name.length < 50 && 
           /[a-zA-Z√•√§√∂√Ö√Ñ√ñ]/.test(name) && // Inneh√•ller bokst√§ver
           !/^\d+[.,]\d{2}$/.test(name) // √Ñr inte bara ett pris
  }


  async cleanup() {
    if (this.worker) {
      await this.worker.terminate()
      this.worker = null
      console.log('üßπ OCR-worker st√§ngd')
    }
  }
}

// Singleton instance
let receiptProcessor = null

export async function processReceiptImage(imageElement) {
  if (!receiptProcessor) {
    receiptProcessor = new ReceiptProcessor()
  }
  
  return await receiptProcessor.processReceipt(imageElement)
}

export async function cleanupReceiptProcessor() {
  if (receiptProcessor) {
    await receiptProcessor.cleanup()
    receiptProcessor = null
  }
}