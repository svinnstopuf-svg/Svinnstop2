import { createWorker } from 'tesseract.js'

// Kvitto-processor som anv√§nder OCR f√∂r att l√§sa produkter fr√•n kvitton
export class ReceiptProcessor {
  constructor() {
    this.worker = null
  }

  async initialize() {
    if (this.worker) return

    console.log('ü§ñ Initierar OCR-worker...')
    this.worker = await createWorker()
    await this.worker.loadLanguage('swe+eng') // Svenska och engelska
    await this.worker.initialize('swe+eng')
    
    // Optimera f√∂r kvitton
    await this.worker.setParameters({
      tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ√Ö√Ñ√ñabcdefghijklmnopqrstuvwxyz√•√§√∂0123456789.,:-‚Ç¨kr% ',
      tessedit_pageseg_mode: 6 // Uniform block of text
    })
    
    console.log('‚úÖ OCR-worker redo')
  }

  async processReceipt(imageElement) {
    try {
      await this.initialize()
      
      console.log('üì∏ L√§ser kvittobild...')
      const { data: { text } } = await this.worker.recognize(imageElement)
      
      console.log('üìù OCR-text:', text)
      
      // Extrahera produkter fr√•n texten
      const products = this.parseReceiptText(text)
      
      console.log('üì¶ Extraherade produkter:', products)
      return products
      
    } catch (error) {
      console.error('‚ùå OCR-fel:', error)
      throw error
    }
  }

  parseReceiptText(text) {
    const products = []
    const allLines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0)
    
    console.log('üìÑ Alla rader:', allLines)
    
    // Hitta produktsektionen mellan referensnummer och total
    const lines = this.extractProductSection(allLines)
    
    console.log('üéØ Produktsektion extraherad:', lines)
    
    // L√§s av ALLT i produktsektionen och l√•t AI avg√∂ra vad som √§r matvaror
    for (let line of lines) {
      console.log(`üîç Analyserar rad: "${line}"`)
      
      // F√∂rs√∂k extrahera produktinformation fr√•n denna rad
      const extractedProduct = this.extractProductFromLine(line)
      
      if (extractedProduct) {
        console.log(`‚úÖ Hittad potentiell produkt:`, extractedProduct)
        
        // Anv√§nd AI f√∂r att avg√∂ra om detta √§r en matvara
        if (this.isLikelyFoodProduct(extractedProduct.name)) {
          products.push(extractedProduct)
          console.log(`üçé L√§gger till matvara: ${extractedProduct.name}`)
        } else {
          console.log(`üö´ Filtrerar bort icke-matvara: ${extractedProduct.name}`)
        }
      }
    }
    
    return products
  }

  extractProductSection(lines) {
    // Hitta start och slutmarkering f√∂r produktsektionen
    let startIndex = -1
    let endIndex = lines.length
    
    // Leta efter referensnummer eller liknande startmarkering
    const startPatterns = [
      /^Ref[\s.]*\d+/i,           // "Ref. 40392" eller "Ref 40392"
      /^\d{5,}/,                 // L√•ngt nummer som referens  
      /^Artikel/i,               // "Artikel" rubrik
      /^Vara/i,                  // "Vara" rubrik
      /^Produkt/i                // "Produkt" rubrik
    ]
    
    // Leta efter slutmarkering
    const endPatterns = [
      /^(Summa|Total|Sum)/i,     // "Summa", "Total", "Sum"
      /^(Att\s+betala)/i,        // "Att betala"
      /^(Moms|VAT)/i,            // Momssektion
      /^(Kort|Kontant|Card)/i,   // Betalningssektion
      /^\s*[-=]+\s*$/            // Linje med bara streck
    ]
    
    // Hitta startindex
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i]
      
      // Kolla startm√∂nster
      if (startPatterns.some(pattern => pattern.test(line))) {
        startIndex = i + 1 // B√∂rja EFTER startmarkeringen
        console.log(`üö¶ Produktsektion startar vid rad ${i + 1}: "${line}"`)
        break
      }
    }
    
    // Om ingen explicit start hittas, b√∂rja fr√•n b√∂rjan
    if (startIndex === -1) {
      startIndex = 0
      console.log('üîç Ingen startmarkering hittad - scannar fr√•n b√∂rjan')
    }
    
    // Hitta slutindex
    for (let i = startIndex; i < lines.length; i++) {
      const line = lines[i]
      
      // Kolla slutm√∂nster
      if (endPatterns.some(pattern => pattern.test(line))) {
        endIndex = i
        console.log(`üö© Produktsektion slutar vid rad ${i + 1}: "${line}"`)
        break
      }
    }
    
    // Extrahera produktsektionen
    const productLines = lines.slice(startIndex, endIndex)
    console.log(`üìã Extraherar rader ${startIndex + 1}-${endIndex} (${productLines.length} rader)`)
    
    return productLines
  }

  // Gener√∂s extraktion av produkter fr√•n kvittorader  
  extractProductFromLine(line) {
    // Hoppa √∂ver uppenbart icke-produktrader
    const obviousIgnore = [
      /^\s*$/,                           // Tom rad
      /^[*\-=_]{3,}$/,                   // Bara symboler
      /^\d{2}:\d{2}/,                    // Tid
      /^\d{4}-\d{2}-\d{2}/,              // Datum YYYY-MM-DD
      /^\d{2}[.\/\-]\d{2}[.\/\-]/,       // Datum DD.MM eller MM/DD
      /^(summa|total|sum|moms|vat|kort|kontant|swish|cash)$/i, // Kvitto-termer
      /^\d+[.,]\d{2}\s*kr?\s*$/,         // Bara pris
      /^(ref[\s.]*\d+|trans[\s.]*\d+)$/i // Referensnummer
    ]
    
    if (obviousIgnore.some(pattern => pattern.test(line))) {
      return null
    }
    
    // Gener√∂sa m√∂nster f√∂r att hitta produkter med priser
    const productPatterns = [
      // Standard: "Produktnamn    12.50" eller "Produktnamn 12.50"
      /^(.+?)\s+(\d+[.,]\d{1,2})\s*kr?\s*$/i,
      
      // Med kvantitet: "Produktnamn 2st    25.00"
      /^(.+?)\s+\d+\s*(?:st|kg|g|L|cl|ml)\s+(\d+[.,]\d{1,2})\s*kr?\s*$/i,
      
      // Med multiplikation: "Produktnamn 2 x 12.50"
      /^(.+?)\s+\d+\s*x\s*(\d+[.,]\d{1,2})\s*kr?\s*$/i,
      
      // Pris f√∂rst: "12.50 Produktnamn"
      /^(\d+[.,]\d{1,2})\s*kr?\s+(.+)$/i,
      
      // Endast produktnamn (inget pris) - f√∂r rader som kanske √§r uppdelade
      /^([a-zA-Z√•√§√∂√Ö√Ñ√ñ][a-zA-Z√•√§√∂√Ö√Ñ√ñ\s\d]{2,40})$/
    ]
    
    for (let pattern of productPatterns) {
      const match = line.match(pattern)
      if (match) {
        let productName, price
        
        if (pattern.source.includes('^(\\d+')) {
          // Pris f√∂rst format
          price = parseFloat(match[1].replace(',', '.'))
          productName = match[2].trim()
        } else if (match[2] && /\d/.test(match[2])) {
          // Standard format med pris som match[2]
          productName = match[1].trim()
          price = parseFloat(match[2].replace(',', '.'))
        } else {
          // Endast produktnamn
          productName = match[1].trim()
          price = 0 // Ok√§nt pris
        }
        
        // Validera pris
        if (price > 0 && (price < 0.1 || price > 1000)) {
          continue // Orealistiskt pris
        }
        
        // Extrahera kvantitet innan rensning
        const originalText = match[0]
        const quantity = this.extractQuantity(originalText)
        const unit = this.extractUnit(originalText)
        
        // Rensa produktnamnet
        const cleanedName = this.cleanProductName(productName)
        
        if (this.isValidProductName(cleanedName)) {
          return {
            name: cleanedName,
            price: price,
            quantity: quantity || 1,
            unit: unit || this.guessUnit(cleanedName)
          }
        }
      }
    }
    
    return null
  }

  // AI-baserad intelligent matvarubed√∂mning
  isLikelyFoodProduct(productName) {
    if (!productName || productName.length < 2) return false
    
    const name = productName.toLowerCase().trim()
    
    // Definitivt INTE matvaror (h√∂g precision)
    const definitelyNotFood = [
      'p√•se', 'plastp√•se', 'kasse', 'b√§rare', 'pappersp√•se',
      'diskmedel', 'tv√§ttmedel', 'st√§d', 'reng√∂ring', 'kemikalie',
      'tandkr√§m', 'tandborste', 'schampo', 'tv√•l', 'deodorant',
      'batterier', 'gl√∂dlampa', 'tidning', 'magasin', 'present',
      'blommor', 'v√§xt', 'leksak', 'cigaretter', 'tobak'
    ]
    
    if (definitelyNotFood.some(item => name.includes(item))) {
      return false
    }
    
    // Matvaruindikatorer (bred lista)
    const foodIndicators = [
      // Frukt & gr√∂nt
      '√§pple', 'p√§ron', 'banan', 'apelsin', 'citron', 'lime', 'kiwi', 'mango', 'ananas',
      'vindruv', 'melon', 'vattenmelon', 'jordgubb', 'hallon', 'bl√•b√§r', 'lingon',
      'tomat', 'gurka', 'paprika', 'l√∂k', 'vitl√∂k', 'morot', 'potatis', 's√∂tpotatis',
      'broccoli', 'blomk√•l', 'k√•l', 'sallad', 'spenat', 'ruccola', 'dill', 'persilja',
      'purjol√∂k', 'selleri', 'r√§disa', 'r√∂dbetor', 'palsternacka', 'k√•lrot',
      
      // K√∂tt & chark
      'k√∂tt', 'n√∂tk√∂tt', 'fl√§skk√∂tt', 'lamm', 'kyckling', 'kalkonfl√§sk', 'korv',
      'prinskorv', 'falukorv', 'salami', 'skinka', 'bacon', 'k√∂ttbullar', 'fl√§skfil√©',
      'n√∂tf√§rs', 'kyckling', 'kycklingfil√©', 'k√∂ttf√§rs',
      
      // Fisk & skaldjur
      'fisk', 'lax', 'torsk', 'sill', 'makrill', 'tonfisk', 'r√§kor', 'kr√§ftor',
      'musslor', 'hummer', 'krabba', 'abborre', 'g√§dda',
      
      // Mejeri
      'mj√∂lk', 'gr√§dde', 'filmj√∂lk', 'yoghurt', 'naturell', 'grekisk', 'kvarg',
      'ost', 'cheddar', 'gouda', 'brie', 'herrg√•rd', 'pr√§st', 'v√§sterbotten',
      'sm√∂r', 'margarin', 'cr√®me fraiche', 'philadelphia', 'cottage cheese',
      
      // √Ñgg
      '√§gg', 'h√∂ns√§gg', 'ekologiska √§gg',
      
      // Br√∂d & spannm√•l
      'br√∂d', 'skogaholm', 'polarbr√∂d', 'limpa', 'tunnbr√∂d', 'kn√§ckebr√∂d',
      'pasta', 'spagetti', 'makaroner', 'penne', 'fusilli', 'lasagne',
      'ris', 'jasminris', 'basmatiris', 'risotto', 'bulgur', 'quinoa', 'couscous',
      'havregryn', 'm√ºsli', 'flingor', 'cornflakes', 'special k',
      'mj√∂l', 'vetemj√∂l', 'graham', 'dinkel',
      
      // Konserver & torrvaror
      'krossad', 'passata', 'tomater', 'b√∂nor', 'kidneyb√∂nor', 'vita b√∂nor',
      'linser', '√§rtor', 'kik√§rtor', 'mais', 'oliver',
      'n√∂tter', 'mandel', 'valn√∂tter', 'cashew', 'pistasch', 'jordn√∂tter',
      'russin', 'dadlar', 'fikon', 'aprikoser',
      
      // Kryddor & s√•ser
      'salt', 'peppar', 'krydda', 'oregano', 'basilika', 'rosmarin', 'timjan',
      'kanel', 'kardemumma', 'ingef√§ra', 'curry', 'paprikapulver', 'chili',
      'ketchup', 'senap', 'majonn√§s', 'sojas√•s', 'tabasco', 'sriracha',
      'olja', 'olivolja', 'rapsolja', 'solrosolja', 'kokosolja',
      'vin√§ger', 'balsamico', '√§ppelcidervin√§ger',
      
      // S√∂tsaker & bakning
      'socker', 'florsocker', 'farinsocker', 'honung', 'sirap', 'l√∂nnsirap',
      'vanilj', 'vaniljsocker', 'bakpulver', 'j√§st', 'kakao',
      'choklad', 'marabou', 'fazer', 'lindt', 'godis', 'l√∂sgodis',
      'kex', 'digestive', 'maria', 'ballerina', 'g√∂teborgs',
      
      // Drycker
      'juice', '√§ppeljuice', 'apelsinjuice', 'tranb√§rsjuice',
      'l√§sk', 'coca cola', 'pepsi', 'sprite', 'fanta', 'festis',
      'vatten', 'mineralvatten', 'raml√∂sa', 'loka', 'evian',
      'kaffe', 'te', 'earl grey', 'gr√∂n te', 'rooibos', 'chai',
      '√∂l', 'folk√∂l', 'l√§tt√∂l', 'stark√∂l', 'ipa', 'lager',
      'vin', 'r√∂dvin', 'vitt vin', 'ros√©', 'champagne', 'prosecco',
      
      // Fryst & k√∂tt
      'fryst', 'frozen', 'k√∂tt', 'korv', 'pizza', 'pannkakor',
      'glass', 'magnum', 'ben jerry', 'h√§agen dazs', 'gb',
      
      // √ñvrigt
      'baby', 'barnmat', 'v√§lling', 'gr√∂t', 'follow', 'semper',
      'glutenfri', 'laktosfri', 'vegansk', 'vegetarisk', 'eko', 'krav'
    ]
    
    // Om namnet inneh√•ller n√•gon matvaruindikator
    if (foodIndicators.some(indicator => name.includes(indicator))) {
      return true
    }
    
    // Heuristik: korta ord som verkar vara matvaror
    if (name.length <= 15) {
      // Vanliga svenska matvaruord-√§ndelser
      const foodEndings = ['mj√∂lk', 'ost', 'k√∂tt', 'fisk', 'br√∂d', 'juice', 'gryn', 'olja']
      if (foodEndings.some(ending => name.endsWith(ending))) {
        return true
      }
    }
    
    // Standard fallback - om det passerat alla filter och ser ut som ett produktnamn
    // L√•t det passera och l√•t anv√§ndaren avg√∂ra
    if (name.match(/^[a-z√•√§√∂\s]+$/i) && name.length >= 3 && name.length <= 25) {
      console.log(`‚ö†Ô∏è Os√§ker produkt som f√•r passera: "${productName}"`);
      return true
    }
    
    return false
  }

  cleanProductName(name) {
    // Ta bort vanliga kvitto-prefix/suffix och kvantiteter
    return name
      .replace(/^\d+\s*x?\s*/i, '') // Ta bort "2x" eller "3 st" i b√∂rjan
      .replace(/\s*\d+\s*st\s*$/i, '') // Ta bort "2 st" i slutet  
      .replace(/\s*\d+\s*kg\s*$/i, '') // Ta bort "1 kg" i slutet
      .replace(/\s*\d+[.,]\d+\s*kg\s*$/i, '') // Ta bort "1,5 kg" i slutet
      .replace(/\s*\d+\s*g\s*$/i, '') // Ta bort "500 g" i slutet
      .replace(/\s*\d+\s*L\s*$/i, '') // Ta bort "1 L" i slutet
      .replace(/\s*\d+[.,]\d+\s*L\s*$/i, '') // Ta bort "1,5 L" i slutet
      .replace(/\s*\d+\s*cl\s*$/i, '') // Ta bort "33 cl" i slutet
      .replace(/\s*\d+\s*ml\s*$/i, '') // Ta bort "250 ml" i slutet
      .replace(/\s*\d+[.,]\d{2}\s*kr?\s*$/i, '') // Ta bort pris i slutet
      .replace(/\s*\*\s*\d+[.,]\d{2}\s*$/i, '') // Ta bort "* 19,90" format
      .replace(/[*]+/g, '') // Ta bort stj√§rnor
      .replace(/\s+/g, ' ') // Normalisera mellanslag
      .trim()
      .toLowerCase() // Normalisera till gemener
      .replace(/^(\w)/, (match) => match.toUpperCase()) // Stor bokstav f√∂rst
  }

  extractQuantity(text) {
    // Extrahera kvantitet fr√•n olika kvittoformat
    const patterns = [
      // "2x Mj√∂lk" eller "3 x √Ñpplen"
      /(\d+)\s*x\s*/i,
      // "Gurka 2st" eller "2 st Tomat"
      /(?:^|\s)(\d+)\s*st(?:\s|$)/i,
      // "Potatis 1kg" eller "1,5 kg Fisk"
      /(\d+(?:[.,]\d+)?)\s*kg/i,
      // "Mj√∂lk 1L" eller "0,5 L Gr√§dde"
      /(\d+(?:[.,]\d+)?)\s*L/i,
      // "Juice 33cl" eller "250 ml Gr√§dde"
      /(\d+)\s*(?:cl|ml)/i,
      // "500g K√∂tt" 
      /(\d+)\s*g/i,
      // Fallback: nummer i b√∂rjan som "3 Bananer"
      /^(\d+)\s+[a-z√•√§√∂]/i
    ]
    
    for (const pattern of patterns) {
      const match = text.match(pattern)
      if (match) {
        const value = parseFloat(match[1].replace(',', '.'))
        console.log(`üî¢ Extraherad kvantitet: ${value} fr√•n "${text}"`)
        return value
      }
    }
    
    return null
  }
  
  extractUnit(text) {
    const lowerText = text.toLowerCase()
    
    // F√∂rst kolla explicita enheter i texten
    const unitPatterns = [
      { pattern: /\d+(?:[.,]\d+)?\s*(kg)/i, unit: 'kg' },
      { pattern: /\d+(?:[.,]\d+)?\s*(g)(?:\s|$)/i, unit: 'g' },
      { pattern: /\d+(?:[.,]\d+)?\s*(L)/i, unit: 'L' },
      { pattern: /\d+\s*(cl)/i, unit: 'cl' },
      { pattern: /\d+\s*(ml)/i, unit: 'ml' },
      { pattern: /\d+\s*(st)(?:\s|$)/i, unit: 'st' }
    ]
    
    // Kolla f√∂r explicita enheter f√∂rst
    for (const { pattern, unit } of unitPatterns) {
      if (pattern.test(text)) {
        console.log(`üìé Extraherad explicit enhet: ${unit} fr√•n "${text}"`)
        return unit
      }
    }
    
    // Om "2x" format, gissa r√§tt enhet baserat p√• produkttyp
    if (/\d+\s*x\s*/i.test(text)) {
      // V√§tskor ska vara i liter √§ven om det st√•r "2x Mj√∂lk"
      if (lowerText.includes('mj√∂lk') || lowerText.includes('juice') || 
          lowerText.includes('l√§sk') || lowerText.includes('vatten') ||
          lowerText.includes('gr√§dde') || lowerText.includes('filmj√∂lk') ||
          lowerText.includes('√∂l') || lowerText.includes('vin')) {
        console.log(`ü•õ V√§tska med 'x' format - anv√§nder L: "${text}"`)
        return 'L'
      }
      
      // K√∂tt/ost i kg
      if (lowerText.includes('k√∂tt') || lowerText.includes('ost') || 
          lowerText.includes('skinka') || lowerText.includes('korv') ||
          lowerText.includes('fisk') || lowerText.includes('kyckling')) {
        console.log(`ü•© K√∂tt/ost med 'x' format - anv√§nder kg: "${text}"`)
        return 'kg'
      }
      
      // Annars styck
      console.log(`üìé 'x' format - anv√§nder st: "${text}"`)
      return 'st'
    }
    
    return null
  }

  guessUnit(productName) {
    const name = productName.toLowerCase()
    
    // V√§tskor - ALLTID i liter
    if (name.includes('mj√∂lk') || name.includes('juice') || name.includes('l√§sk') || 
        name.includes('√∂l') || name.includes('vin') || name.includes('vatten') ||
        name.includes('gr√§dde') || name.includes('filmj√∂lk') || name.includes('yoghurt') ||
        name.includes('kefir') || name.includes('smoothie')) {
      console.log(`ü•õ Gissar enhet L f√∂r v√§tska: ${productName}`)
      return 'L'
    }
    
    // K√∂tt/fisk/ost - i kg (eller g f√∂r mindre m√§ngder)
    if (name.includes('k√∂tt') || name.includes('ost') || name.includes('skinka') || 
        name.includes('korv') || name.includes('fisk') || name.includes('kyckling') ||
        name.includes('n√∂t') || name.includes('fl√§sk') || name.includes('bacon') ||
        name.includes('lax') || name.includes('torsk') || name.includes('r√§ka')) {
      console.log(`ü•© Gissar enhet kg f√∂r k√∂tt/fisk: ${productName}`)
      return 'kg'
    }
    
    // L√∂sviktsvaror - frukt/gr√∂nsaker i kg
    if (name.includes('tomat') || name.includes('potatis') || name.includes('√§pple') || 
        name.includes('banan') || name.includes('gurka') || name.includes('morot') ||
        name.includes('l√∂k') || name.includes('paprika') || name.includes('avokado') ||
        name.includes('citron') || name.includes('apelsin') || name.includes('p√§ron') ||
        name.includes('sallad') || name.includes('broccoli') || name.includes('blomk√•l')) {
      console.log(`ü•¶ Gissar enhet kg f√∂r frukt/gr√∂nsaker: ${productName}`)
      return 'kg'
    }
    
    // Torrvaror som s√§ljs i kg
    if (name.includes('ris') || name.includes('pasta') || name.includes('mj√∂l') ||
        name.includes('socker') || name.includes('n√∂tter') || name.includes('mandel')) {
      console.log(`üåæ Gissar enhet kg f√∂r torrvara: ${productName}`)
      return 'kg'
    }
    
    // Br√∂d och bakvaror - per styck
    if (name.includes('br√∂d') || name.includes('kaka') || name.includes('bulle') ||
        name.includes('muffin') || name.includes('t√•rta') || name.includes('kex')) {
      console.log(`üçû Gissar enhet st f√∂r bakvara: ${productName}`)
      return 'st'
    }
    
    // Konserver och f√∂rpackningar - per styck
    if (name.includes('burk') || name.includes('konserv') || name.includes('f√∂rpackning') ||
        name.includes('t√•rta') || name.includes('pizza')) {
      console.log(`ü•´ Gissar enhet st f√∂r f√∂rpackning: ${productName}`)
      return 'st'
    }
    
    // √Ñgg - per styck eller f√∂rpackning
    if (name.includes('√§gg')) {
      console.log(`ü•ö Gissar enhet st f√∂r √§gg: ${productName}`)
      return 'st'
    }
    
    // Standard fallback
    console.log(`‚ùì Ok√§nd produkttyp - anv√§nder st som fallback: ${productName}`)
    return 'st'
  }

  isValidProductName(name) {
    // Kolla att det verkar vara ett riktigt produktnamn
    return name.length > 2 && 
           name.length < 50 && 
           /[a-zA-Z√•√§√∂√Ö√Ñ√ñ]/.test(name) && // Inneh√•ller bokst√§ver
           !/^\d+[.,]\d{2}$/.test(name) // √Ñr inte bara ett pris
  }


  async cleanup() {
    if (this.worker) {
      await this.worker.terminate()
      this.worker = null
      console.log('üßπ OCR-worker st√§ngd')
    }
  }
}

// Singleton instance
let receiptProcessor = null

export async function processReceiptImage(imageElement) {
  if (!receiptProcessor) {
    receiptProcessor = new ReceiptProcessor()
  }
  
  return await receiptProcessor.processReceipt(imageElement)
}

export async function cleanupReceiptProcessor() {
  if (receiptProcessor) {
    await receiptProcessor.cleanup()
    receiptProcessor = null
  }
}