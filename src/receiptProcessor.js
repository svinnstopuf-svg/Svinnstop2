import { createWorker } from 'tesseract.js'
import { analyzeAgainstTrainingData, cleanReceiptProductName } from './receiptTrainingData.js'
import { extractProductsFromReceipt, identifyStoreType } from './receiptAnalysisTraining.js'
import { STRICT_FOOD_VALIDATOR } from './comprehensiveFoodDatabase.js'

// Kvitto-processor som anv√§nder OCR f√∂r att l√§sa produkter fr√•n kvitton
export class ReceiptProcessor {
  constructor() {
    this.worker = null
    this.debugMode = false // Debug avst√§ngt f√∂r produktion
  }


  async initialize() {
    if (this.worker) return

    this.worker = await createWorker()
    await this.worker.loadLanguage('swe+eng') // Svenska och engelska
    await this.worker.initialize('swe+eng')
    
  // Balanserade OCR-inst√§llningar f√∂r b√•de hastighet och kvalitet
    await this.worker.setParameters({
      // Grundl√§ggande inst√§llningar - optimerade f√∂r b√§ttre l√§sbarhet
      tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ√Ö√Ñ√ñabcdefghijklmnopqrstuvwxyz√•√§√∂0123456789.,:-‚Ç¨kr%*/() ',
      tessedit_pageseg_mode: 6, // Uniform text block - b√§st f√∂r kvitton
      tessedit_ocr_engine_mode: 1, // LSTM + Legacy hybrid
      preserve_interword_spaces: 1,
      
      // F√∂rb√§ttrad igenk√§nning utan √∂veroptimering
      classify_enable_learning: 1,
      classify_enable_adaptive_matcher: 1,
      
      // Beh√•ll viktiga ordb√∂cker f√∂r b√§ttre ordf√∂rst√•else
      load_punc_dawg: 1, // Interpunktion
      load_number_dawg: 1, // Siffror och priser
      load_system_dawg: 1, // Systemordbok f√∂r vanliga ord - AKTIVERAD f√∂r b√§ttre igenk√§nning
      load_freq_dawg: 1, // Frekvensordbok f√∂r svenska ord - AKTIVERAD
      
      // Mindre aggressiv brushantering f√∂r b√§ttre ordl√§sning
      textord_noise_sizelimit: 1.0, // Mindre aggressiv brusreducering
      textord_noise_normratio: 2.0,
      textord_min_linesize: 1.0, // Standard storlek f√∂r text
      
      // Standardinst√§llningar f√∂r b√§ttre stabilitet
      tesseract_minimum_word_size: 2, // Kr√§v minst 2 tecken f√∂r ord
      
      // Deaktivera on√∂diga debug-funktioner
      tessedit_create_hocr: 0,
      tessedit_create_tsv: 0,
      tessedit_dump_pageseg_images: 0
    })
    
  }

  async processReceipt(imageElement) {
    try {
      await this.initialize()
      
      console.log('üìÑ Startar MULTI-PASS kvittoscanning...')
      
      // Anv√§nd alltid multi-pass strategi f√∂r b√§sta resultat
      return await this.processReceiptMultiPass(imageElement)
        
    } catch (error) {
      console.error('OCR misslyckades:', error)
      return []
    }
  }
  
  // NY MULTI-PASS STRATEGI
  async processReceiptMultiPass(imageElement) {
    console.log('üéØ MULTI-PASS: Startar intelligent kvittoscanning...')
    
    const imageHeight = imageElement.naturalHeight || imageElement.height
    const imageWidth = imageElement.naturalWidth || imageElement.width
    
    console.log(`üìè Kvittostorlek: ${imageWidth}x${imageHeight}`)
    
    // PASS 1: F√∂rbehandla och identifiera produktomr√•det
    console.log('üîç PASS 1: Identifierar produktomr√•det...')
    const preprocessedImage = this.preprocessImage(imageElement, 'standard')
    const productRegion = this.identifyProductRegion(preprocessedImage)
    
    // PASS 2: Extrahera produkter med optimal OCR
    console.log('üìù PASS 2: Extraherar produkter...')
    const allProductLines = await this.extractProductLines(productRegion || preprocessedImage)
    
    // PASS 3: Validera och rensa produkter
    console.log('üß† PASS 3: Validerar mot matvarudatabas...')
    const validFoodProducts = this.validateAndCleanProducts(allProductLines)
    
    console.log(`‚úÖ MULTI-PASS KLAR: ${validFoodProducts.length} giltiga matvaror funna`)
    return validFoodProducts
  }
  
  // PASS 1: Identifiera produktomr√•det (skippa header/footer)
  identifyProductRegion(canvas) {
    console.log('üéØ Letar efter produktomr√•det i kvittot...')
    
    const ctx = canvas.getContext('2d')
    const width = canvas.width
    const height = canvas.height
    
    // Skippa √∂vre 15% (butiknamn, datum) och nedre 20% (totalsumma, betalning)
    const skipTop = Math.floor(height * 0.15)
    const skipBottom = Math.floor(height * 0.20)
    const productHeight = height - skipTop - skipBottom
    
    if (productHeight <= 0) {
      console.log('‚ö†Ô∏è F√∂r litet omr√•de - anv√§nder hela bilden')
      return canvas
    }
    
    // Skapa ny canvas med bara produktomr√•det
    const productCanvas = document.createElement('canvas')
    const productCtx = productCanvas.getContext('2d')
    
    productCanvas.width = width
    productCanvas.height = productHeight
    
    productCtx.drawImage(canvas, 0, -skipTop)
    
    console.log(`‚úÇÔ∏è Produktomr√•de: ${width}x${productHeight} (skippa topp: ${skipTop}px, botten: ${skipBottom}px)`)
    return productCanvas
  }
  
  // PASS 2: Extrahera produktrader med strukturmedvetenhet
  async extractProductLines(canvas) {
    console.log('üó∫ Extraherar produktrader med strukturanalys...')
    
    // Enkel OCR med fokus p√• hastighet
    const { data: { text } } = await this.worker.recognize(canvas, {
      tessedit_pageseg_mode: 6, // Uniform text block
      tessedit_ocr_engine_mode: 1,
      tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ√Ö√Ñ√ñabcdefghijklmnopqrstuvwxyz√•√§√∂0123456789.,:-‚Ç¨kr%() '
    })
    
    const lines = text.split('\n').map(line => line.trim()).filter(line => line.length > 2)
    console.log(`üìù Hittade ${lines.length} textrader`)
    
    // Analysera radstruktur: leta efter m√∂nster som "Produktnamn ... Pris"
    const productLines = []
    
    for (const line of lines) {
      if (this.looksLikeProductLine(line)) {
        productLines.push(line)
      }
    }
    
    console.log(`üì¶ ${productLines.length} rader ser ut som produkter`)
    return productLines
  }
  
  // Kontrollera om en rad ser ut som en produktrad
  looksLikeProductLine(line) {
    // M√•ste ha b√•de text och pris f√∂r att vara en produktrad
    const hasPrice = /\d+[.,]\d{2}\s*(kr|:-|$)/i.test(line)
    const hasText = /[a-z√•√§√∂]{2,}/i.test(line)
    const isNotHeader = !/^[A-Z√Ö√Ñ√ñ\s]{5,}$/i.test(line) // Inte bara stora bokst√§ver
    const isNotTotal = !/^(summa|total|att betala|kort|kontant)/i.test(line)
    
    return hasPrice && hasText && isNotHeader && isNotTotal
  }
  
  // PASS 3: Validera produkter mot matvarudatabas
  validateAndCleanProducts(productLines) {
    console.log(`üß† Validerar ${productLines.length} produktrader...`)
    
    const validProducts = []
    
    for (const line of productLines) {
      // Extrahera produktnamn (ta bort pris och kvantitet)
      const cleanedName = this.extractCoreProductName(line)
      
      if (!cleanedName || cleanedName.length < 2) continue
      
      // Kontrollera om det definitivt INTE √§r mat
      if (this.isDefinitelyNotFood(line)) {
        console.log(`üö´ Skippar icke-mat: "${line}"`)
        continue
      }
      
      // Validera mot matvarudatabas
      const isValidFood = STRICT_FOOD_VALIDATOR.isValidFoodProduct(cleanedName)
      
      if (isValidFood) {
        const product = {
          name: cleanedName,
          originalName: line,
          quantity: this.extractQuantityFromName(line),
          unit: this.guessUnit(line),
          price: this.extractPrice(line)
        }
        
        validProducts.push(product)
        console.log(`‚úÖ GILTIG MAT: "${cleanedName}"`)
      } else {
        console.log(`‚ùå AVVISAD: "${cleanedName}" finns inte i matdatabasen`)
      }
    }
    
    return validProducts
  }
  
  // Extrahera pris fr√•n produktrad
  extractPrice(line) {
    const priceMatch = line.match(/(\d+[.,]\d{2})\s*(kr|:-|$)/i)
    if (priceMatch) {
      return parseFloat(priceMatch[1].replace(',', '.'))
    }
    return null
  }
  
  // Standard OCR f√∂r normala kvitton
  async processStandardReceipt(imageElement) {
    // Skapa 3 olika f√∂rbehandlade versioner av bilden
    const versions = [
      { name: 'Standard', image: this.preprocessImage(imageElement, 'standard') },
      { name: 'H√∂g kontrast', image: this.preprocessImage(imageElement, 'high_contrast') },
      { name: 'Mjuk', image: this.preprocessImage(imageElement, 'soft') }
    ]
    
    const allResults = []
    
    // K√∂r OCR p√• alla versioner
    for (let i = 0; i < versions.length; i++) {
      const version = versions[i]
      
      try {
        // S√§tt olika OCR-parametrar f√∂r varje version
        await this.setOCRParameters(i)
        
        const startTime = Date.now()
        const { data: { text } } = await this.worker.recognize(version.image)
        const endTime = Date.now()
        
        console.log(`‚öôÔ∏è OCR ${version.name}: ${Math.round(endTime - startTime)}ms`)
        
        // Extrahera produkter
        const products = this.parseReceiptText(text, version.name)
        
        allResults.push({
          version: version.name,
          text: text,
          products: products,
          score: this.scoreResult(text, products)
        })
        
        console.log(`üìã ${version.name}: ${products.length} produkter, po√§ng: ${allResults[allResults.length - 1].score}`)
        
      } catch (error) {
        console.error(`OCR ${version.name} misslyckades:`, error)
        allResults.push({ version: version.name, products: [], score: 0 })
      }
    }
    
    // V√§lj b√§sta resultatet baserat p√• po√§ng
    allResults.sort((a, b) => b.score - a.score)
    const bestResult = allResults[0]
    
    console.log(`üèÜ B√§st resultat: ${bestResult.version} med ${bestResult.products.length} produkter`)
    return bestResult.products
  }
  
  // Segmenterad bearbetning f√∂r l√•nga kvitton (40-100+ produkter)
  async processLongReceiptSegmented(imageElement) {
    console.log('üöÄ Startar segmenterad bearbetning f√∂r l√•ngt kvitto...')
    
    // F√∂rbehandla hela bilden f√∂rst
    const preprocessedImage = this.preprocessImage(imageElement, 'standard')
    
    // Segmentera i √∂verlappande delar
    const segments = this.segmentLongReceipt(preprocessedImage)
    console.log(`üî™ Kvitto uppdelat i ${segments.length} segment`)
    
    const allProducts = []
    
    // Bearbeta varje segment
    for (let i = 0; i < segments.length; i++) {
      console.log(`üîç Bearbetar segment ${i + 1}/${segments.length}...`)
      
      try {
        // Anv√§nd b√§sta OCR-inst√§llningar f√∂r segmentet
        await this.setOCRParameters(0) // Precision-l√§ge
        
        const { data: { text } } = await this.worker.recognize(segments[i])
        
        if (text && text.trim().length > 10) {
          const segmentProducts = this.parseReceiptText(text, `Segment-${i + 1}`)
          console.log(`üìä Segment ${i + 1}: ${segmentProducts.length} produkter`)
          allProducts.push(...segmentProducts)
        }
        
      } catch (error) {
        console.error(`‚ùå Segment ${i + 1} misslyckades:`, error)
      }
    }
    
    // Intelligent deduplicering f√∂r √∂verlappande segment
    const uniqueProducts = this.deduplicateProducts(allProducts)
    
    console.log(`‚ú® L√•ngt kvitto klart: ${allProducts.length} ‚Üí ${uniqueProducts.length} unika produkter`)
    return uniqueProducts
  }
  
  // Segmentera l√•nga kvitton i hanterbara delar
  segmentLongReceipt(canvas) {
    const segments = []
    const maxSegmentHeight = 1800 // Optimal storlek f√∂r OCR
    const overlapHeight = 400 // Stort √∂verlapp f√∂r att inte missa produkter
    
    if (canvas.height <= maxSegmentHeight) {
      return [canvas] // Kort kvitto - returnera som det √§r
    }
    
    let y = 0
    let segmentIndex = 0
    
    while (y < canvas.height) {
      const segmentCanvas = document.createElement('canvas')
      const segmentCtx = segmentCanvas.getContext('2d')
      
      const segmentHeight = Math.min(maxSegmentHeight, canvas.height - y)
      segmentCanvas.width = canvas.width
      segmentCanvas.height = segmentHeight
      
      // Kopiera segment fr√•n f√∂rbehandlad bild
      segmentCtx.drawImage(canvas, 0, y, canvas.width, segmentHeight, 0, 0, canvas.width, segmentHeight)
      
      segments.push(segmentCanvas)
      console.log(`üìå Segment ${segmentIndex + 1}: y=${y}, h√∂jd=${segmentHeight}px`)
      
      // N√§sta segment med √∂verlappning
      y += maxSegmentHeight - overlapHeight
      segmentIndex++
      
      // S√§kerhetssp√§rr f√∂r extremt l√•nga kvitton
      if (segmentIndex > 20) {
        console.log('‚ö†Ô∏è Extremt l√•ngt kvitto - begr√§nsar till 20 segment f√∂r prestanda')
        break
      }
      
      // Avbryt om vi n√•tt slutet
      if (y >= canvas.height - 100) break
    }
    
    return segments
  }
  
  // Intelligent deduplicering f√∂r segment-√∂verlappningar
  deduplicateProducts(allProducts) {
    const uniqueProducts = []
    const seenProducts = new Set()
    
    for (const product of allProducts) {
      // Skapa unik nyckel baserad p√• produktnamn och pris
      const normalizedName = product.name.toLowerCase().trim().replace(/\s+/g, ' ')
      const key = `${normalizedName}_${product.price || 0}_${product.unit || 'st'}`
      
      if (!seenProducts.has(key)) {
        seenProducts.add(key)
        uniqueProducts.push(product)
      }
    }
    
    return uniqueProducts
  }

  // S√§tt olika OCR-parametrar f√∂r olika strategier
  async setOCRParameters(strategy) {
    const configs = [
      // Strategi 0: Precision (f√∂r tydlig text)
      {
        tessedit_pageseg_mode: 6, // Uniform text block
        tessedit_ocr_engine_mode: 2, // LSTM only
        tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ√Ö√Ñ√ñabcdefghijklmnopqrstuvwxyz√•√§√∂0123456789.,:-‚Ç¨kr%*/() '
      },
      // Strategi 1: Aggressiv (f√∂r otydlig text)
      {
        tessedit_pageseg_mode: 8, // Single word
        tessedit_ocr_engine_mode: 1, // LSTM + Legacy
        tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ√Ö√Ñ√ñabcdefghijklmnopqrstuvwxyz√•√§√∂0123456789.,:-‚Ç¨kr%*/()¬† '
      },
      // Strategi 2: Bred (f√∂r komplexa layouter)
      {
        tessedit_pageseg_mode: 11, // Sparse text
        tessedit_ocr_engine_mode: 3, // Legacy only
        tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ√Ö√Ñ√ñabcdefghijklmnopqrstuvwxyz√•√§√∂0123456789.,:-‚Ç¨kr%*/()¬† '
      }
    ]
    
    await this.worker.setParameters(configs[strategy])
  }

  // F√∂rb√§ttrat po√§ngs√§ttningssystem - optimerat f√∂r b√•de korta och l√•nga kvitton
  scoreResult(text, products) {
    let score = 0
    const lowerText = text.toLowerCase()
    
    // Po√§ng f√∂r antal produkter (skalat f√∂r l√•nga kvitton)
    const productCount = products.length
    if (productCount > 20) {
      // L√•nga kvitton - mindre po√§ng per produkt men bonus f√∂r m√•nga produkter
      score += productCount * 8 + Math.min((productCount - 20) * 2, 100)
    } else {
      // Normala kvitton - standard po√§ng
      score += productCount * 12
    }
    
    // Po√§ng f√∂r textl√§ngd (mer text = mer information) - skalat f√∂r l√•nga kvitton
    const textLengthScore = Math.min(text.length / 15, text.length > 5000 ? 80 : 50)
    score += textLengthScore
    
    // Ut√∂kad lista med svenska matvaruord f√∂r b√§ttre po√§ngs√§ttning
    const foodWords = [
      // Vanliga svenska matvaror
      'banan', 'svamp', 'champinjon', 'gurka', 'avokado', 'lakrits', 'br√∂d', 'mj√∂lk', 'ost', 'k√∂tt',
      // Till√§gg f√∂r b√§ttre t√§ckning
      'tomat', 'potatis', 'l√∂k', 'morot', 'sallad', 'paprika', '√§pple', 'p√§ron', 'citron', 'apelsin',
      'kyckling', 'fisk', 'ris', 'pasta', 'juice', 'yoghurt', 'sm√∂r', 'gr√§dde', '√§gg', 'korv',
      'broccoli', 'blomk√•l', 'spenat', 'rucola', 'dill', 'persilja', 'vitl√∂k', 'ingef√§ra',
      // Vanliga ICA-varum√§rken
      'basic', 'selection', 'i love eco', 'garant', 'eldorado'
    ]
    
    let foodWordCount = 0
    foodWords.forEach(word => {
      if (lowerText.includes(word)) {
        foodWordCount++
        score += 6
      }
    })
    
    // Po√§ng f√∂r prisformat - f√∂rb√§ttrat f√∂r svenska kvitton
    const pricePatterns = [
      /\d+[.,]\d{2}\s*kr/gi,           // "12.50 kr" eller "12,50kr"
      /\d+[.,]\d{2}\s*:-/gi,           // "12.50:-" (vanligt p√• kvitton)
      /\d+[.,]\d{2}\s*$/gm             // Pris i slutet av rad
    ]
    
    let totalPriceMatches = 0
    pricePatterns.forEach(pattern => {
      const matches = text.match(pattern)
      if (matches) totalPriceMatches += matches.length
    })
    
    score += totalPriceMatches * 4
    
    // Bonus f√∂r kvitton med bra f√∂rh√•llande mellan produkter och priser
    if (totalPriceMatches > 0 && productCount > 0) {
      const priceToProductRatio = totalPriceMatches / productCount
      if (priceToProductRatio >= 0.7 && priceToProductRatio <= 1.5) {
        score += 20 // Bonus f√∂r realistisk pris/produkt-kvot
      }
    }
    
    // Extra bonus f√∂r kvitton med m√•nga matvareindikatorer
    if (foodWordCount > 5) {
      score += Math.min((foodWordCount - 5) * 3, 30)
    }
    
    // Po√§ng f√∂r svenska kvittoindikatorer
    const receiptIndicators = ['ica', 'coop', 'willys', 'hemk√∂p', 'maxi', 'kvantum', 'supermarket']
    receiptIndicators.forEach(indicator => {
      if (lowerText.includes(indicator)) score += 15
    })
    
    console.log(`üèÜ Po√§ngs√§ttning: ${productCount} produkter, ${totalPriceMatches} priser, ${foodWordCount} matord ‚Üí ${score} po√§ng`)
    return score
  }

  // ENKEL och SNABB bildbehandling optimerad f√∂r multi-pass strategi
  preprocessImage(imageElement, mode = 'standard') {
    const canvas = document.createElement('canvas')
    const ctx = canvas.getContext('2d')
    
    const originalWidth = imageElement.naturalWidth || imageElement.width
    const originalHeight = imageElement.naturalHeight || imageElement.height
    
    // Balanserad skalning f√∂r hastighet och kvalitet
    const scale = originalHeight > 3000 ? 2.0 : originalHeight > 1500 ? 2.5 : 3.0
    
    canvas.width = originalWidth * scale
    canvas.height = originalHeight * scale
    
    console.log(`üîç Snabb bildf√∂rb√§ttring: ${originalWidth}x${originalHeight} ‚Üí ${canvas.width}x${canvas.height} (${scale}x)`)
    
    // Hantverksskillnad f√∂r b√§sta kvalitet vid uppskalning
    ctx.imageSmoothingEnabled = true
    ctx.imageSmoothingQuality = 'high'
    ctx.drawImage(imageElement, 0, 0, canvas.width, canvas.height)
    
    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height)
    const data = imageData.data
    
    // Enkel men effektiv bildbehandling
    let avgBrightness = 0
    for (let i = 0; i < data.length; i += 4) {
      const gray = data[i] * 0.299 + data[i + 1] * 0.587 + data[i + 2] * 0.114
      avgBrightness += gray
    }
    avgBrightness /= (data.length / 4)
    
    // Minimal bearbetning f√∂r hastighet
    const needsEnhancement = avgBrightness < 130
    if (needsEnhancement) {
      console.log('üí° Till√§mpar ljusf√∂rb√§ttring...')
      
      for (let i = 0; i < data.length; i += 4) {
        const gray = data[i] * 0.299 + data[i + 1] * 0.587 + data[i + 2] * 0.114
        const enhanced = Math.min(255, gray * 1.2) // Enkel ljusf√∂rst√§rkning
        data[i] = data[i + 1] = data[i + 2] = enhanced
      }
    }
    
    ctx.putImageData(imageData, 0, 0)
    console.log('‚ú® Snabb bildbehandling klar')
    return canvas
  }
  
  // GAUSSIAN BLUR - Reducerar brus utan att f√∂rstora text f√∂r mycket
  applyGaussianBlur(data, width, height, sigma) {
    const kernel = this.createGaussianKernel(sigma)
    const kernelSize = kernel.length
    const radius = Math.floor(kernelSize / 2)
    const original = new Uint8ClampedArray(data)
    
    for (let y = radius; y < height - radius; y++) {
      for (let x = radius; x < width - radius; x++) {
        const i = (y * width + x) * 4
        let r = 0, g = 0, b = 0
        
        for (let ky = 0; ky < kernelSize; ky++) {
          for (let kx = 0; kx < kernelSize; kx++) {
            const pi = ((y + ky - radius) * width + (x + kx - radius)) * 4
            const weight = kernel[ky][kx]
            r += original[pi] * weight
            g += original[pi + 1] * weight
            b += original[pi + 2] * weight
          }
        }
        
        data[i] = Math.max(0, Math.min(255, r))
        data[i + 1] = Math.max(0, Math.min(255, g))
        data[i + 2] = Math.max(0, Math.min(255, b))
      }
    }
  }
  
  // UNSHARP MASKING - Sk√§rper text genom att subtrahera bl√§nkad version
  applyUnsharpMask(data, width, height, amount, radius, threshold) {
    const original = new Uint8ClampedArray(data)
    const blurred = new Uint8ClampedArray(data)
    
    // Skapa bl√§nkad version
    this.applyGaussianBlur(blurred, width, height, radius)
    
    // Unsharp mask: Original + Amount * (Original - Blurred)
    for (let i = 0; i < data.length; i += 4) {
      for (let channel = 0; channel < 3; channel++) {
        const diff = original[i + channel] - blurred[i + channel]
        if (Math.abs(diff) >= threshold) {
          data[i + channel] = Math.max(0, Math.min(255, original[i + channel] + amount * diff))
        }
      }
    }
  }
  
  // CLAHE (Contrast Limited Adaptive Histogram Equalization) - F√∂rb√§ttrar lokal kontrast
  applyCLAHE(data, width, height) {
    const tileSize = 64 // Storlek p√• lokala omr√•den
    const clipLimit = 3.0 // Begr√§nsa f√∂rb√§ttringen
    
    for (let ty = 0; ty < height; ty += tileSize) {
      for (let tx = 0; tx < width; tx += tileSize) {
        const endY = Math.min(ty + tileSize, height)
        const endX = Math.min(tx + tileSize, width)
        
        // Skapa histogram f√∂r denna tile
        const hist = new Array(256).fill(0)
        const pixelCount = (endY - ty) * (endX - tx)
        
        for (let y = ty; y < endY; y++) {
          for (let x = tx; x < endX; x++) {
            const i = (y * width + x) * 4
            const gray = Math.round(data[i] * 0.299 + data[i + 1] * 0.587 + data[i + 2] * 0.114)
            hist[gray]++
          }
        }
        
        // Clip histogram
        const clipValue = (pixelCount * clipLimit) / 256
        let redistributed = 0
        for (let i = 0; i < 256; i++) {
          if (hist[i] > clipValue) {
            redistributed += hist[i] - clipValue
            hist[i] = clipValue
          }
        }
        
        // Redistribuera klippta v√§rden j√§mnt
        const redistPerBin = redistributed / 256
        for (let i = 0; i < 256; i++) {
          hist[i] += redistPerBin
        }
        
        // Skapa CDF (Cumulative Distribution Function)
        const cdf = new Array(256)
        cdf[0] = hist[0]
        for (let i = 1; i < 256; i++) {
          cdf[i] = cdf[i - 1] + hist[i]
        }
        
        // Normalisera CDF
        for (let i = 0; i < 256; i++) {
          cdf[i] = (cdf[i] * 255) / pixelCount
        }
        
        // Till√§mpa histogram equalization p√• tile
        for (let y = ty; y < endY; y++) {
          for (let x = tx; x < endX; x++) {
            const i = (y * width + x) * 4
            const gray = Math.round(data[i] * 0.299 + data[i + 1] * 0.587 + data[i + 2] * 0.114)
            const enhanced = Math.round(cdf[gray])
            data[i] = data[i + 1] = data[i + 2] = Math.max(0, Math.min(255, enhanced))
          }
        }
      }
    }
  }
  
  // AVANCERAD KONTRAST - F√∂r h√∂g kontrast-l√§ge
  applyAdvancedContrast(data, width, height, isLowLight, isLowContrast) {
    for (let i = 0; i < data.length; i += 4) {
      const gray = data[i] * 0.299 + data[i + 1] * 0.587 + data[i + 2] * 0.114
      
      let enhanced
      if (isLowLight && isLowContrast) {
        // Extremt aggressiv f√∂rb√§ttring
        enhanced = gray < 128 ? gray * 0.6 : Math.min(255, 128 + (gray - 128) * 2.0)
      } else if (isLowLight) {
        // Ljusf√∂rb√§ttring
        enhanced = Math.min(255, gray * 1.4)
      } else if (isLowContrast) {
        // Kontrastf√∂rb√§ttring
        enhanced = gray < 128 ? gray * 0.8 : 128 + (gray - 128) * 1.3
      } else {
        // Standard f√∂rb√§ttring
        enhanced = gray < 128 ? gray * 0.9 : 128 + (gray - 128) * 1.1
      }
      
      data[i] = data[i + 1] = data[i + 2] = Math.max(0, Math.min(255, enhanced))
    }
  }
  
  // MORPHOLOGICAL FILTERING - Reng√∂r text genom erosion/dilation
  applyMorphologicalFiltering(data, width, height, mode) {
    const kernel = mode === 'text_enhancement' ? 
      [[0, 1, 0], [1, 1, 1], [0, 1, 0]] : // Kors f√∂r textf√∂rb√§ttring
      [[1, 1, 1], [1, 1, 1], [1, 1, 1]]   // 3x3 f√∂r brusreducering
    
    const temp = new Uint8ClampedArray(data)
    const kernelRadius = 1
    
    // Erosion f√∂ljt av dilation (Opening)
    // Erosion
    for (let y = kernelRadius; y < height - kernelRadius; y++) {
      for (let x = kernelRadius; x < width - kernelRadius; x++) {
        const i = (y * width + x) * 4
        let minVal = 255
        
        for (let ky = 0; ky < 3; ky++) {
          for (let kx = 0; kx < 3; kx++) {
            if (kernel[ky][kx]) {
              const pi = ((y + ky - kernelRadius) * width + (x + kx - kernelRadius)) * 4
              const gray = data[pi] * 0.299 + data[pi + 1] * 0.587 + data[pi + 2] * 0.114
              minVal = Math.min(minVal, gray)
            }
          }
        }
        
        temp[i] = temp[i + 1] = temp[i + 2] = minVal
      }
    }
    
    // Dilation
    for (let y = kernelRadius; y < height - kernelRadius; y++) {
      for (let x = kernelRadius; x < width - kernelRadius; x++) {
        const i = (y * width + x) * 4
        let maxVal = 0
        
        for (let ky = 0; ky < 3; ky++) {
          for (let kx = 0; kx < 3; kx++) {
            if (kernel[ky][kx]) {
              const pi = ((y + ky - kernelRadius) * width + (x + kx - kernelRadius)) * 4
              const gray = temp[pi] * 0.299 + temp[pi + 1] * 0.587 + temp[pi + 2] * 0.114
              maxVal = Math.max(maxVal, gray)
            }
          }
        }
        
        data[i] = data[i + 1] = data[i + 2] = maxVal
      }
    }
  }
  
  // MJUK F√ñRB√ÑTTRING - F√∂r soft-l√§ge
  applyGentleEnhancement(data, width, height, avgBrightness) {
    const factor = avgBrightness < 100 ? 1.15 : avgBrightness < 150 ? 1.08 : 1.02
    
    for (let i = 0; i < data.length; i += 4) {
      const gray = data[i] * 0.299 + data[i + 1] * 0.587 + data[i + 2] * 0.114
      const enhanced = gray * factor
      data[i] = data[i + 1] = data[i + 2] = Math.max(0, Math.min(255, enhanced))
    }
  }
  
  // ADAPTIV F√ñRB√ÑTTRING - F√∂r standard-l√§ge
  applyAdaptiveEnhancement(data, width, height, avgBrightness, contrast, isLowLight, isLowContrast) {
    for (let i = 0; i < data.length; i += 4) {
      const gray = data[i] * 0.299 + data[i + 1] * 0.587 + data[i + 2] * 0.114
      
      let enhanced = gray
      
      // Ljuskorrigering
      if (isLowLight) {
        enhanced *= 1.2
      }
      
      // Kontrastkorrigering
      if (isLowContrast) {
        enhanced = gray < 128 ? gray * 0.85 : 128 + (gray - 128) * 1.15
      }
      
      // Gamma-korrigering f√∂r olika ljusf√∂rh√•llanden
      const gamma = avgBrightness < 100 ? 0.8 : avgBrightness > 180 ? 1.2 : 1.0
      if (gamma !== 1.0) {
        enhanced = 255 * Math.pow(enhanced / 255, 1 / gamma)
      }
      
      data[i] = data[i + 1] = data[i + 2] = Math.max(0, Math.min(255, enhanced))
    }
  }
  
  // BILATERAL FILTER - Kant-bevarande mjukning
  applyBilateralFilter(data, width, height) {
    const original = new Uint8ClampedArray(data)
    const spatialSigma = 2.0
    const intensitySigma = 20.0
    const radius = 3
    
    for (let y = radius; y < height - radius; y++) {
      for (let x = radius; x < width - radius; x++) {
        const i = (y * width + x) * 4
        const centerGray = original[i] * 0.299 + original[i + 1] * 0.587 + original[i + 2] * 0.114
        
        let sumR = 0, sumG = 0, sumB = 0, weightSum = 0
        
        for (let dy = -radius; dy <= radius; dy++) {
          for (let dx = -radius; dx <= radius; dx++) {
            const ni = ((y + dy) * width + (x + dx)) * 4
            const neighborGray = original[ni] * 0.299 + original[ni + 1] * 0.587 + original[ni + 2] * 0.114
            
            const spatialDist = Math.sqrt(dx * dx + dy * dy)
            const intensityDist = Math.abs(centerGray - neighborGray)
            
            const spatialWeight = Math.exp(-(spatialDist * spatialDist) / (2 * spatialSigma * spatialSigma))
            const intensityWeight = Math.exp(-(intensityDist * intensityDist) / (2 * intensitySigma * intensitySigma))
            const weight = spatialWeight * intensityWeight
            
            sumR += original[ni] * weight
            sumG += original[ni + 1] * weight
            sumB += original[ni + 2] * weight
            weightSum += weight
          }
        }
        
        data[i] = Math.max(0, Math.min(255, sumR / weightSum))
        data[i + 1] = Math.max(0, Math.min(255, sumG / weightSum))
        data[i + 2] = Math.max(0, Math.min(255, sumB / weightSum))
      }
    }
  }
  
  // GAUSSIAN KERNEL - Hj√§lpfunktion
  createGaussianKernel(sigma) {
    const size = Math.ceil(6 * sigma) | 1 // S√§kerst√§ll udda storlek
    const kernel = []
    const center = Math.floor(size / 2)
    let sum = 0
    
    for (let y = 0; y < size; y++) {
      kernel[y] = []
      for (let x = 0; x < size; x++) {
        const distance = Math.sqrt((x - center) ** 2 + (y - center) ** 2)
        const value = Math.exp(-(distance ** 2) / (2 * sigma ** 2))
        kernel[y][x] = value
        sum += value
      }
    }
    
    // Normalisera
    for (let y = 0; y < size; y++) {
      for (let x = 0; x < size; x++) {
        kernel[y][x] /= sum
      }
    }
    
    return kernel
  }

  parseReceiptText(text, version = 'unknown') {
    const allLines = text.split('\n').map(line => line.trim()).filter(line => line.length > 0)
    
    const extractedProducts = extractProductsFromReceipt(allLines)
    
    
    const products = []
    
    for (const product of extractedProducts) {
      // Rensa produktnamn och extrahera k√§rnan
      const cleanedName = this.extractCoreProductName(product.name)
      const originalName = product.name
      
      // STRIKT validering mot omfattande matvarudatabas - som en m√§nniska skulle g√∂ra
      console.log(`üîç Validerar: "${cleanedName}" (original: "${originalName}")`)
      
      // F√∂rst: kontrollera om det definitivt INTE √§r mat (kvittobrus, betalningsinfo, etc.)
      const isDefinitelyNotFood = this.isDefinitelyNotFood(originalName)
      
      if (isDefinitelyNotFood) {
        console.log(`üö´ Definitivt inte mat: "${originalName}"`)
        continue // Hoppa √∂ver icke-matvaror
      }
      
      // HUVUDVALIDERING: Strikt kontroll mot omfattande matvarudatabas
      const isValidFood = STRICT_FOOD_VALIDATOR.isValidFoodProduct(cleanedName)
      
      if (isValidFood) {
        // Produkten finns i v√•r omfattande matvarudatabas - l√§gg till den
        const standardProduct = {
          name: cleanedName, // Anv√§nd det rensade namnet
          originalName: originalName, // Beh√•ll originalet f√∂r debugging
          quantity: product.quantity || this.extractQuantityFromName(originalName),
          unit: product.unit || this.guessUnit(originalName),
          price: product.price
        }
        products.push(standardProduct)
        console.log(`‚úÖ GODK√ÑND MATVARA: "${cleanedName}" lagd till`)
      } else {
        console.log(`‚ùå AVVISAD: "${cleanedName}" finns inte i matvarudatabasen`)
      }
    }
    
    
    return products
  }

  // Visa debug-info p√• sk√§rmen f√∂r telefondebug
  showDebugInfo(title, content) {
    if (!this.debugMode) return
    
    // Skapa eller hitta debug-element
    let debugElement = document.getElementById('receipt-debug')
    if (!debugElement) {
      debugElement = document.createElement('div')
      debugElement.id = 'receipt-debug'
      debugElement.style.cssText = `
        position: fixed;
        top: 10px;
        left: 10px;
        right: 10px;
        background: rgba(0,0,0,0.9);
        color: white;
        padding: 10px;
        border-radius: 5px;
        font-family: monospace;
        font-size: 12px;
        z-index: 9999;
        max-height: 300px;
        overflow-y: auto;
        white-space: pre-wrap;
        word-break: break-all;
      `
      document.body.appendChild(debugElement)
    }
    
    // L√§gg till debug-info
    const timestamp = new Date().toLocaleTimeString()
    debugElement.innerHTML += `\n\n[${timestamp}] ${title}\n${content}\n${'='.repeat(50)}`
    
    // Scrolla ned
    debugElement.scrollTop = debugElement.scrollHeight
  }

  extractProductSection(lines) {
    // Hitta start och slutmarkering f√∂r produktsektionen
    let startIndex = -1
    let endIndex = lines.length
    
    // Leta efter referensnummer eller liknande startmarkering
    const startPatterns = [
      /^Ref[\s.]*\d+/i,           // "Ref. 40392" eller "Ref 40392"
      /^\d{5,}/,                 // L√•ngt nummer som referens  
      /^Artikel/i,               // "Artikel" rubrik
      /^Vara/i,                  // "Vara" rubrik
      /^Produkt/i                // "Produkt" rubrik
    ]
    
    // Leta efter slutmarkering
    const endPatterns = [
      /^(Summa|Total|Sum)/i,     // "Summa", "Total", "Sum"
      /^(Att\s+betala)/i,        // "Att betala"
      /^(Moms|VAT)/i,            // Momssektion
      /^(Kort|Kontant|Card)/i,   // Betalningssektion
      /^\s*[-=]+\s*$/            // Linje med bara streck
    ]
    
    // Hitta startindex
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i]
      
      // Kolla startm√∂nster
      if (startPatterns.some(pattern => pattern.test(line))) {
        startIndex = i + 1 // B√∂rja EFTER startmarkeringen
        console.log(`üö¶ Produktsektion startar vid rad ${i + 1}: "${line}"`)
        break
      }
    }
    
    // Om ingen explicit start hittas, b√∂rja fr√•n b√∂rjan
    if (startIndex === -1) {
      startIndex = 0
      console.log('üîç Ingen startmarkering hittad - scannar fr√•n b√∂rjan')
    }
    
    // Hitta slutindex
    for (let i = startIndex; i < lines.length; i++) {
      const line = lines[i]
      
      // Kolla slutm√∂nster
      if (endPatterns.some(pattern => pattern.test(line))) {
        endIndex = i
        console.log(`üö© Produktsektion slutar vid rad ${i + 1}: "${line}"`)
        break
      }
    }
    
    // Extrahera produktsektionen
    const productLines = lines.slice(startIndex, endIndex)
    console.log(`üìã Extraherar rader ${startIndex + 1}-${endIndex} (${productLines.length} rader)`)
    
    return productLines
  }

  // Gener√∂s extraktion av produkter fr√•n kvittorader  
  extractProductFromLine(line) {
    // Hoppa √∂ver uppenbart icke-produktrader (men INTE * som kan vara produkter)
    const obviousIgnore = [
      /^\s*$/,                           // Tom rad
      /^[-=_]{3,}$/,                     // Bara streck/symboler (EJ * som kan vara produkter)
      /^\d{2}:\d{2}/,                    // Tid
      /^\d{4}-\d{2}-\d{2}/,              // Datum YYYY-MM-DD
      /^\d{2}[.\/\-]\d{2}[.\/\-]/,       // Datum DD.MM eller MM/DD
      /^(summa|total|sum|moms|vat|kort|kontant|swish|cash)$/i, // Kvitto-termer
      /^\d+[.,]\d{2}\s*kr?\s*$/,         // Bara pris
      /^(ref[\s.]*\d+|trans[\s.]*\d+)$/i // Referensnummer
    ]
    
    if (obviousIgnore.some(pattern => pattern.test(line))) {
      return null
    }
    
    // Gener√∂sa m√∂nster f√∂r att hitta produkter (med och utan priser)
    const productPatterns = [
      // Standard: "Produktnamn    12.50" eller "Produktnamn 12.50"
      /^(.+?)\s+(\d+[.,]\d{1,2})\s*kr?\s*$/i,
      
      // Med kvantitet: "Produktnamn 2st    25.00"
      /^(.+?)\s+\d+\s*(?:st|kg|g|L|cl|ml)\s+(\d+[.,]\d{1,2})\s*kr?\s*$/i,
      
      // Med multiplikation: "Produktnamn 2 x 12.50"
      /^(.+?)\s+\d+\s*x\s*(\d+[.,]\d{1,2})\s*kr?\s*$/i,
      
      // Pris f√∂rst: "12.50 Produktnamn"
      /^(\d+[.,]\d{1,2})\s*kr?\s+(.+)$/i,
      
      // ***NYTT*** Asterisk-format: "*Avokado", "*Lakritsmix", "*Svamp champinjon"
      /^\*\s*([a-zA-Z√•√§√∂√Ö√Ñ√ñ][a-zA-Z√•√§√∂√Ö√Ñ√ñ\s\-]{2,40})\s*$/i,
      
      // ***NYTT*** Produkter med komman: "Avokado, Lakritsmix, Svamp"
      /^([a-zA-Z√•√§√∂√Ö√Ñ√ñ][a-zA-Z√•√§√∂√Ö√Ñ√ñ\s\-,]{3,50})$/i,
      
      // Endast produktnamn (inget pris) - mer gener√∂s
      /^([a-zA-Z√•√§√∂√Ö√Ñ√ñ][a-zA-Z√•√§√∂√Ö√Ñ√ñ\s\d\-]{2,40})$/i
    ]
    
    for (let pattern of productPatterns) {
      const match = line.match(pattern)
      if (match) {
        let productName, price
        
        if (pattern.source.includes('^(\\d+')) {
          // Pris f√∂rst format
          price = parseFloat(match[1].replace(',', '.'))
          productName = match[2].trim()
        } else if (match[2] && /\d/.test(match[2])) {
          // Standard format med pris som match[2]
          productName = match[1].trim()
          price = parseFloat(match[2].replace(',', '.'))
        } else {
          // Endast produktnamn
          productName = match[1].trim()
          price = 0 // Ok√§nt pris
        }
        
        // Validera pris
        if (price > 0 && (price < 0.1 || price > 1000)) {
          continue // Orealistiskt pris
        }
        
        // Extrahera kvantitet innan rensning
        const originalText = match[0]
        const quantity = this.extractQuantity(originalText)
        const unit = this.extractUnit(originalText)
        
        // Rensa produktnamnet (ta bort * och extra mellanslag)
        let cleanedName = this.cleanProductName(productName)
        cleanedName = cleanedName.replace(/^\*\s*/, '').trim() // Ta bort * i b√∂rjan
        
        // Hantera kommaseparerade produkter ("Avokado, Lakritsmix, Svamp")
        if (cleanedName.includes(',')) {
          console.log(`üî™ Hittade kommaseparerade produkter: "${cleanedName}"`)
          const products = []
          const parts = cleanedName.split(',').map(p => p.trim()).filter(p => p.length > 2)
          
          for (const part of parts) {
            const partCleaned = this.cleanProductName(part)
            if (this.isValidProductName(partCleaned)) {
              products.push({
                name: partCleaned,
                price: price || 0,
                quantity: 1, // Varje del f√•r kvantitet 1
                unit: this.guessUnit(partCleaned)
              })
            }
          }
          
          return products // Returnera array av produkter
        }
        
        if (this.isValidProductName(cleanedName)) {
          return {
            name: cleanedName,
            price: price || 0,
            quantity: quantity || 1,
            unit: unit || this.guessUnit(cleanedName)
          }
        }
      }
    }
    
    return null
  }

  // Kraftfull OCR-felkorrektion och otydlighetshantering
  correctOCRErrors(text) {
    if (!text) return text
    
    let corrected = text.toLowerCase()
    
    // Specifika produktnamn-korrigeringar
    const productCorrections = {
      'ritik': 'lakritsmix',
      'ritik.*mix': 'lakritsmix',
      'ritik.*1258.*dre': 'lakritsmix',
      'akritsmix': 'lakritsmix',
      'iakritsmix': 'lakritsmix',
      'lakrit.*mix': 'lakritsmix',
      'gurka.*mini': 'mini gurka',
      'mini.*gurka': 'mini gurka',
      'gur[kc]a': 'gurka',
      'avoka[dt]o': 'avokado',
      'avo[ck]ado': 'avokado',
      'svamp.*champ': 'svamp champinjon',
      'champ.*svamp': 'svamp champinjon'
    }
    
    // Applicera produktkorrigeringar
    for (const [errorPattern, correction] of Object.entries(productCorrections)) {
      const regex = new RegExp(errorPattern, 'gi')
      if (regex.test(corrected)) {
        corrected = correction
        console.log(`‚öôÔ∏è OCR-korrektion: "${text}" ‚Üí "${correction}"`)
        return correction
      }
    }
    
    // Vanliga OCR-fel och deras korrigeringar
    const ocrCorrections = {
      // Siffror som blir bokst√§ver
      '0': ['o', 'O'], '1': ['l', 'I', '|'], '5': ['s', 'S'], '8': ['B'], '6': ['G'],
      
      // Bokst√§ver som blir siffror
      'o': ['0'], 'l': ['1', 'I'], 's': ['5'], 'g': ['9'], 'z': ['2'],
      
      // Vanliga svenska bokstavsfel
      '√§': ['a', 'ae'], '√∂': ['o', 'oe'], '√•': ['a', 'aa'],
      'c': ['e'], 'e': ['c'], 'n': ['h'], 'h': ['n'], 'm': ['rn'],
      'u': ['v'], 'v': ['u'], 'w': ['vv'], 'k': ['lc'], 'g': ['q'],
      
      // Speciella tecken som f√∂rsvinner eller blir fel
      '\u00a0': ' ', '¬≠': '', '‚Äã': '', // Icke-synliga tecken
    }
    
    // Applicera grundl√§ggande korrigeringar
    for (const [correct, errors] of Object.entries(ocrCorrections)) {
      for (const error of errors) {
        corrected = corrected.replace(new RegExp(error, 'gi'), correct)
      }
    }
    
    return corrected
  }
  
  // Phonetic matching f√∂r svenska ord (Double Metaphone-inspirerad)
  getSoundex(word) {
    if (!word) return ''
    
    let soundex = word.toLowerCase()
      .replace(/[^√•√§√∂a-z]/g, '')
      // Svenska ljud
      .replace(/ck/g, 'k')
      .replace(/ch/g, 'sh')
      .replace(/sch/g, 'sh') 
      .replace(/tj/g, 'sh')
      .replace(/kj/g, 'sh')
      .replace(/sk/g, 'sh')
      .replace(/√§/g, 'e')
      .replace(/√∂/g, 'o')
      .replace(/√•/g, 'o')
      // Liknande ljud
      .replace(/[bp]/g, 'b')
      .replace(/[dt]/g, 't')
      .replace(/[kg]/g, 'k')
      .replace(/[fv]/g, 'f')
      .replace(/[sz]/g, 's')
      .replace(/[mn]/g, 'm')
      .replace(/[lr]/g, 'l')
      
    return soundex.substring(0, 4)
  }
  
  // Kontextuell intelligens f√∂r produktgissning
  findBestMatch(garbledText, candidates) {
    const garbled = garbledText.toLowerCase().trim()
    let bestMatch = null
    let bestScore = 0
    
    for (const candidate of candidates) {
      const cand = candidate.toLowerCase()
      let score = 0
      
      // Exakt match
      if (garbled === cand) return candidate
      
      // Substring match
      if (garbled.includes(cand) || cand.includes(garbled)) {
        score += 0.8
      }
      
      // Fuzzy match med Levenshtein
      const similarity = 1 - (this.levenshteinDistance(garbled, cand) / Math.max(garbled.length, cand.length))
      score += similarity * 0.6
      
      // Phonetic match
      if (this.getSoundex(garbled) === this.getSoundex(cand)) {
        score += 0.4
      }
      
      // F√∂rsta bokst√§ver matchar
      if (garbled[0] === cand[0]) {
        score += 0.2
      }
      
      // Samma l√§ngd ger bonus
      if (Math.abs(garbled.length - cand.length) <= 2) {
        score += 0.1
      }
      
      if (score > bestScore) {
        bestScore = score
        bestMatch = candidate
      }
    }
    
    return bestScore > 0.5 ? bestMatch : null
  }
  
  // Avancerad AI f√∂r s√∂ml√∂s produktigenk√§nning med otydlighetshantering
  isLikelyFoodProduct(productName) {
    if (!productName || productName.length < 2) return false
    
    // ***KRITISK S√ÑKERHETSCHECK*** - f√∂rst validera att det √§r ett vettigt produktnamn
    if (!this.isValidProductName(productName)) {
      console.log(`üö® Avvisar nonsens-produktnamn: "${productName}"`)
      return false
    }
    
    // F√∂rst korrigera OCR-fel
    const correctedName = this.correctOCRErrors(productName)
    const name = correctedName.toLowerCase().trim()
    
    // Definitivt INTE matvaror (h√∂g precision med fuzzy matching)
    const definitelyNotFood = [
      'p√•se', 'plastp√•se', 'kasse', 'b√§rare', 'pappersp√•se', 'shopping', 'bag',
      'diskmedel', 'tv√§ttmedel', 'st√§d', 'reng√∂ring', 'kemikalie', 'spray',
      'tandkr√§m', 'tandborste', 'schampo', 'tv√•l', 'deodorant', 'shampoo',
      'batterier', 'gl√∂dlampa', 'tidning', 'magasin', 'present', 'g√•va',
      'blommor', 'v√§xt', 'leksak', 'cigaretter', 'tobak', 'lighter',
      'verktyg', 'skruv', 'spik', 'j√§rn', 'plast', 'metall', 'elektronik'
    ]
    
    // Fuzzy matching f√∂r icke-matvaror
    if (definitelyNotFood.some(item => this.fuzzyMatch(name, item, 0.8))) {
      console.log(`üö´ Fuzzy match icke-matvara: "${productName}"`)
      return false
    }
    
    // Omfattande matvaruindikatorer med svenska termer, varum√§rken och synonymer
    // PLUS OCR-trasiga versioner f√∂r fuzzy matching
    const foodIndicators = [
      // OCR-trasiga versioner av vanliga produkter
      'ritik', 'akrit', 'iakrit', 'lakrit', // F√∂r lakritsmix
      'vokado', 'avoka', 'avoca', 'avokndo', // F√∂r avokado  
      'gurka', 'gurca', 'gurk', 'gur', 'urka', // F√∂r gurka
      'vamp', 'svanp', 'svam', 'champ', 'chanp', // F√∂r svamp
      'bnan', 'bana', 'banan', 'banana', // F√∂r banan
      
      // Frukt & gr√∂nt (svenska och internationella namn)
      '√§pple', 'apple', 'p√§ron', 'pears', 'banan', 'banana', 'apelsin', 'orange', 
      'citron', 'lemon', 'lime', 'kiwi', 'mango', 'ananas', 'pineapple',
      'vindruv', 'grapes', 'melon', 'vattenmelon', 'watermelon', 'cantaloupe',
      'jordgubb', 'strawberry', 'hallon', 'raspberry', 'bl√•b√§r', 'blueberry', 
      'lingon', 'cranberry', 'bj√∂rnb√§r', 'blackberry', 'vinb√§r', 'currant',
      'tomat', 'tomato', 'k√∂rsb√§rstomat', 'cocktailtomat', 'plommtomat', 'tomatkvist',
      'gurka', 'cucumber', 'minigurka', 'mini gurka', 'v√§xthus gurka', 'slanggurka',
      'paprika', 'pepper', 'chili', 'spetspaprika', 'romano paprika', '3-f√§rg paprika',
      'l√∂k', 'onion', 'r√∂dl√∂k', 'vitl√∂k', 'garlic', 'morot', 'carrot', 'prim√∂rmor√∂tter',
      'potatis', 'potato', 's√∂tpotatis', 'sweet potato', 'rotselleri', 'celery',
      'broccoli', 'blomk√•l', 'cauliflower', 'k√•l', 'cabbage', 'vitk√•l', 'r√∂dk√•l',
      'sallad', 'lettuce', 'iceberg', 'rucola', 'arugula', 'spenat', 'spinach', 'babyspenat',
      'dill', 'persilja', 'parsley', 'basilika', 'basil', 'oregano', 'timjan', 'thyme',
      'purjol√∂k', 'leek', 'selleri', 'r√§disa', 'radish', 'r√∂dbetor', 'beetroot',
      'palsternacka', 'parsnip', 'k√•lrot', 'swede', 'pumpa', 'pumpkin',
      'zucchini', 'squash', 'aubergine', 'eggplant', 'avokado', 'avocado', 'hass avokado', 'mogna avokado',
      // Svamp
      'svamp', 'mushroom', 'champinjon', 'champignon', 'kantarell', 'shiitake',
      'ostronsvamp', 'portabello', 'portobello', 'enoki', 'cremini', 'button mushroom',
      
      // K√∂tt & chark (svenska termer + varum√§rken)
      'k√∂tt', 'meat', 'n√∂tk√∂tt', 'beef', 'fl√§sk', 'pork', 'lamm', 'lamb',
      'kyckling', 'chicken', 'kalkon', 'turkey', 'and', 'duck', 'g√•s', 'goose',
      'korv', 'sausage', 'prinskorv', 'falukorv', 'salami', 'chorizo', 'pepperoni',
      'skinka', 'ham', 'bacon', 'fl√§sk', 'kassler', 'r√∂kt', 'smoked',
      'k√∂ttbullar', 'meatballs', 'k√∂ttf√§rs', 'mince', 'f√§rs', 'ground',
      'fl√§skfil√©', 'pork tenderloin', 'n√∂tfil√©', 'beef fillet', 'entrecote',
      'kyckling', 'kycklingfil√©', 'chicken breast', 'kycklingl√•r', 'chicken thigh',
      // Svenska k√∂ttvarum√§rken
      'scan', 'danish crown', 'kr√∂nj√§garen', 'lev√§ngers', 'gunnarsh√∂g',
      
      // Fisk & skaldjur
      'fisk', 'lax', 'torsk', 'sill', 'makrill', 'tonfisk', 'r√§kor', 'kr√§ftor',
      'musslor', 'hummer', 'krabba', 'abborre', 'g√§dda',
      
      // Mejeri (svenska termer + varum√§rken)
      'mj√∂lk', 'milk', 'standardmj√∂lk', 'mellanmj√∂lk', 'l√§ttmj√∂lk', 'minimj√∂lk',
      'havremj√∂lk', 'oat milk', 'mandelmj√∂lk', 'almond milk', 'sojamj√∂lk', 'soy milk',
      'gr√§dde', 'cream', 'vispgr√§dde', 'whipping cream', 'matlagningsgr√§dde',
      'filmj√∂lk', 'soured milk', 'kefir', 'buttermilk', 'k√§rnmj√∂lk',
      'yoghurt', 'yogurt', 'naturell', 'natural', 'grekisk', 'greek', 'probiotisk',
      'kvarg', 'quark', 'cottage cheese', 'keso', 'ricotta',
      // Osttyper
      'ost', 'cheese', 'cheddar', 'gouda', 'brie', 'camembert', 'roquefort',
      'herrg√•rd', 'pr√§st', 'v√§sterbotten', 'gr√§dd', 'h√•rd', 'mj√∂lk',
      'mozzarella', 'parmesan', 'feta', 'getost', 'chevre', 'blue cheese',
      // Sm√∂r & margarin
      'sm√∂r', 'butter', 'margarin', 'margarine', 'bregott', 'flora', 'l√§tta',
      'cr√®me fraiche', 'philadelphia', 'sourcream', 'gr√§ddfil',
      // Svenska mejerivarum√§rken
      'arla', 'sk√•nemejerier', 'norrmejerier', 'falsterbo', 'l√§ngk√§rra',
      'krono', 'milko', 'garant', 'eldorado',
      
      // √Ñgg
      '√§gg', 'h√∂ns√§gg', 'ekologiska √§gg',
      
      // Br√∂d & spannm√•l
      'br√∂d', 'skogaholm', 'polarbr√∂d', 'limpa', 'tunnbr√∂d', 'kn√§ckebr√∂d',
      'pasta', 'spagetti', 'makaroner', 'penne', 'fusilli', 'lasagne',
      'ris', 'jasminris', 'basmatiris', 'risotto', 'bulgur', 'quinoa', 'couscous',
      'havregryn', 'm√ºsli', 'flingor', 'cornflakes', 'special k',
      'mj√∂l', 'vetemj√∂l', 'graham', 'dinkel',
      
      // Konserver & torrvaror
      'krossad', 'passata', 'tomater', 'b√∂nor', 'kidneyb√∂nor', 'vita b√∂nor',
      'linser', '√§rtor', 'kik√§rtor', 'mais', 'oliver',
      'n√∂tter', 'mandel', 'valn√∂tter', 'cashew', 'pistasch', 'jordn√∂tter',
      'russin', 'dadlar', 'fikon', 'aprikoser',
      
      // Kryddor & s√•ser
      'salt', 'peppar', 'krydda', 'oregano', 'basilika', 'rosmarin', 'timjan',
      'kanel', 'kardemumma', 'ingef√§ra', 'curry', 'paprikapulver', 'chili',
      'ketchup', 'senap', 'majonn√§s', 'sojas√•s', 'tabasco', 'sriracha',
      'olja', 'olivolja', 'rapsolja', 'solrosolja', 'kokosolja',
      'vin√§ger', 'balsamico', '√§ppelcidervin√§ger',
      
      // S√∂tsaker & bakning
      'socker', 'florsocker', 'farinsocker', 'honung', 'sirap', 'l√∂nnsirap',
      'vanilj', 'vaniljsocker', 'bakpulver', 'j√§st', 'kakao',
      'choklad', 'marabou', 'fazer', 'lindt', 'godis', 'l√∂sgodis',
      'kex', 'digestive', 'maria', 'ballerina', 'g√∂teborgs',
      
      // Drycker (med svenska varum√§rken)
      'juice', '√§ppeljuice', 'apelsinjuice', 'tranb√§rsjuice', 'ananasjuice',
      'bravo', 'tropicana', 'god morgon', 'froosh', 'innocent', 'r√•juice',
      'l√§sk', 'coca cola', 'pepsi', 'sprite', 'fanta', 'festis', 'julmust',
      '7up', 'mirinda', 'schweppes', 'trocadero', 'pommac', 'champis',
      'vatten', 'mineralvatten', 'raml√∂sa', 'loka', 'evian', 'bonaqua',
      'k√§llvatten', 'naturell', 'kolsyrat', 'still', 'sparkling',
      // Varma drycker
      'kaffe', 'coffee', 'espresso', 'cappuccino', 'latte', 'americano',
      'gevalia', 'l√∂fbergs', 'zoegas', 'arvid nordquist', 'classic',
      'te', 'tea', 'earl grey', 'gr√∂n te', 'green tea', 'rooibos', 'chai',
      'lipton', 'tetley', 'twinings', '√∂rtte', 'kusmi',
      // Alkohol
      '√∂l', 'beer', 'folk√∂l', 'l√§tt√∂l', 'stark√∂l', 'ipa', 'lager',
      'carlsberg', 'heineken', 'stella artois', 'brooklyn', 'spendrups',
      'vin', 'wine', 'r√∂dvin', 'red wine', 'vitt vin', 'white wine',
      'ros√©', 'champagne', 'prosecco', 'cava', 'sprit', 'vodka', 'whiskey',
      
      // Br√∂d & bakverk (svenska varum√§rken)
      'br√∂d', 'bread', 'limpa', 'tunnbr√∂d', 'kn√§ckebr√∂d', 'rye bread',
      'polarbr√∂d', 'skogaholm', 'wasa', 'leksands', 'fin crisp', 'ryvita',
      'hamburgerbr√∂d', 'toast', 'bagel', 'croissant', 'scones', 'muffins',
      
      // S√∂tsaker & snacks (svenska varum√§rken)
      'choklad', 'chocolate', 'marabou', 'fazer', 'lindt', 'toblerone',
      'godis', 'candy', 'l√∂sgodis', 'haribo', 'malaco', 'cloetta',
      'lakrits', 'lakritsmix', 'licorice', 'salmiak', 'djungelvraal',
      'saltlakrits', 'lakritshjul', 'lakritsb√•tar', 'ahlgrens',
      'kex', 'cookies', 'digestive', 'maria', 'ballerina', 'g√∂teborgs',
      'chips', 'estrella', 'oj√§', 'taffel', 'pringles', 'cheez doodles',
      'popcorn', 'n√∂tter', 'nuts', 'mandel', 'cashew', 'pistasch',
      
      // Fryst & glass
      'fryst', 'frozen', 'frysta', 'k√∂ttbullar', 'pizza', 'pannkakor',
      'glass', 'ice cream', 'magnum', 'ben jerry', 'h√§agen dazs', 'gb',
      'struts', '88:an', 'nogger', 'cornetto', 'p√§ron split',
      
      // Kryddor & s√•ser (svenska varum√§rken)
      'krydda', 'spice', 'santa maria', 'ica basic', 'garant',
      'ketchup', 'senap', 'mustard', 'majonn√§s', 'mayonnaise', 'felix',
      'sojas√•s', 'soy sauce', 'sriracha', 'tabasco', 'worcester',
      
      // Specialkost & h√§lsa
      'glutenfri', 'gluten free', 'laktosfri', 'lactose free', 'vegansk', 'vegan',
      'vegetarisk', 'vegetarian', 'eko', 'organic', 'krav', 'f√§rsk', 'fresh',
      'naturell', 'natural', 'h√§lsokost', 'superfood', 'protein',
      
      // Barnmat
      'baby', 'barnmat', 'baby food', 'v√§lling', 'gr√∂t', 'porridge',
      'semper', 'nestle', 'follow', 'hipp', 'bl√•dra', 'n√§ringsdryck',
      
      // Fisk & skaldjur (ut√∂kade)
      'fisk', 'fish', 'lax', 'salmon', 'torsk', 'cod', 'sill', 'herring',
      'makrill', 'mackerel', 'tonfisk', 'tuna', 'r√§kor', 'shrimp',
      'kr√§ftor', 'crayfish', 'musslor', 'mussels', 'ostron', 'oysters'
    ]
    
    // Anv√§nd avancerad produktanalys
    const analysis = this.analyzeProductName(correctedName)
    
    // Intelligent matching med flera metoder
    
    // 1. Direkta fuzzy matches mot matvaruindikatorer (l√§gre tr√∂skel f√∂r OCR-fel)
    const fuzzyMatches = foodIndicators.filter(indicator => 
      this.fuzzyMatch(name, indicator, 0.4) // S√§nkt fr√•n 0.6 till 0.4
    )
    
    if (fuzzyMatches.length > 0) {
      console.log(`üéØ Fuzzy match matvaror: ${fuzzyMatches.join(', ')} f√∂r "${productName}" (korrigerat: "${correctedName}")`)
      return true
    }
    
    // 2. Intelligent best match med OCR-korrektion
    const bestMatch = this.findBestMatch(name, foodIndicators)
    if (bestMatch) {
      console.log(`ü§ñ Intelligent match: "${productName}" ‚Üí "${bestMatch}" (OCR-korrigerat: "${correctedName}")`)
      return true
    }
    
    // 3. Partiell matching - hitta delar av ord
    const partialMatches = foodIndicators.filter(indicator => {
      const parts = name.split(/[\s\-_]+/)
      return parts.some(part => part.length > 2 && indicator.includes(part))
    })
    
    if (partialMatches.length > 0) {
      console.log(`üìç Partiell match: "${productName}" matchar delar av [${partialMatches.join(', ')}]`)
      return true
    }
    
    // 4. Kontextuell inferens baserat p√• ordstruktur
    const contextualClues = this.analyzeWordStructure(name)
    if (contextualClues.isFoodLike) {
      console.log(`üîç Kontextuell inferens: "${productName}" har matvaruliknande struktur (${contextualClues.reasons.join(', ')})`)
      return true
    }
    
    // 5. Anv√§nd AI-analys med konfidensgrad
    if (analysis.confidence >= 0.2) { // S√§nkt tr√∂skel √§nnu mer f√∂r OCR-fel
      console.log(`ü§ñ AI-analys: ${Math.round(analysis.confidence * 100)}% s√§ker p√• "${productName}" (${analysis.categories.join(', ')})`);
      return true
    }
    
    // Varum√§rke ger h√∂g troliga
    if (analysis.brandMatch) {
      console.log(`üéÜ K√§nt varum√§rke "${analysis.brandMatch}" f√∂r "${productName}"`);
      return true
    }
    
    // Heuristik f√∂r svenska matvarunamn
    if (name.length <= 15) {
      const foodEndings = ['mj√∂lk', 'ost', 'k√∂tt', 'fisk', 'br√∂d', 'juice', 'gryn', 'olja']
      if (foodEndings.some(ending => name.endsWith(ending))) {
        console.log(`üîç Matvarusuffix hittad i "${productName}"`);
        return true
      }
    }
    
    // ***TR√ÑNINGSDATA-BASERAD*** Validering - j√§mf√∂r mot verkliga kvitton
    const trainingAnalysis = analyzeAgainstTrainingData(productName)
    if (trainingAnalysis.confidence >= 0.3) {
      console.log(`üéØ Tr√§ningsdata-match (${Math.round(trainingAnalysis.confidence * 100)}%): "${productName}" liknar [${trainingAnalysis.matches.join(', ')}]`);
      return true
    }
    
    console.log(`üö´ Filtrerar definitivt bort: "${productName}"`);
    return false
  }

  // Fuzzy string matching f√∂r intelligent produktigenk√§nning
  fuzzyMatch(str1, str2, threshold = 0.7) {
    if (!str1 || !str2) return false
    
    const s1 = str1.toLowerCase().trim()
    const s2 = str2.toLowerCase().trim()
    
    // Exakt match
    if (s1 === s2) return true
    
    // Substring match
    if (s1.includes(s2) || s2.includes(s1)) return true
    
    // Levenshtein distance f√∂r fuzzy matching
    const distance = this.levenshteinDistance(s1, s2)
    const maxLen = Math.max(s1.length, s2.length)
    const similarity = 1 - (distance / maxLen)
    
    return similarity >= threshold
  }
  
  // Levenshtein distance algoritm
  levenshteinDistance(str1, str2) {
    const matrix = []
    
    for (let i = 0; i <= str2.length; i++) {
      matrix[i] = [i]
    }
    
    for (let j = 0; j <= str1.length; j++) {
      matrix[0][j] = j
    }
    
    for (let i = 1; i <= str2.length; i++) {
      for (let j = 1; j <= str1.length; j++) {
        if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
          matrix[i][j] = matrix[i - 1][j - 1]
        } else {
          matrix[i][j] = Math.min(
            matrix[i - 1][j - 1] + 1, // substitution
            matrix[i][j - 1] + 1,     // insertion
            matrix[i - 1][j] + 1      // deletion
          )
        }
      }
    }
    
    return matrix[str2.length][str1.length]
  }
  
  // Intelligent produktnamnsanalys med NLP-liknande tekniker
  analyzeProductName(name) {
    const analysis = {
      originalName: name,
      confidence: 0,
      foodProbability: 0,
      categories: [],
      brandMatch: null,
      cleanedName: this.cleanProductName(name)
    }
    
    const lowerName = name.toLowerCase()
    
    // Kategoriklassificering
    const categories = {
      'frukt_gront': ['frukt', 'gr√∂n', 'sallad', 'tomat', 'gurka', 'potatis'],
      'mejeri': ['mj√∂lk', 'ost', 'yoghurt', 'sm√∂r', 'gr√§dde'],
      'kott_fisk': ['k√∂tt', 'fisk', 'kyckling', 'korv', 'skinka'],
      'brod_spannmal': ['br√∂d', 'pasta', 'ris', 'havregryn'],
      'drycker': ['juice', 'l√§sk', 'vatten', 'kaffe', 'te'],
      'godis_snacks': ['choklad', 'godis', 'chips', 'kex']
    }
    
    for (const [category, keywords] of Object.entries(categories)) {
      if (keywords.some(keyword => lowerName.includes(keyword))) {
        analysis.categories.push(category)
        analysis.foodProbability += 0.2
      }
    }
    
    // Varum√§rkesigenk√§nning
    const brands = ['arla', 'fazer', 'marabou', 'felix', 'scan', 'ica', 'coop']
    for (const brand of brands) {
      if (lowerName.includes(brand)) {
        analysis.brandMatch = brand
        analysis.foodProbability += 0.3
        break
      }
    }
    
    // Specialmarkeringar
    const specialMarkers = ['eko', 'krav', 'glutenfri', 'laktosfri']
    if (specialMarkers.some(marker => lowerName.includes(marker))) {
      analysis.foodProbability += 0.2
    }
    
    analysis.confidence = Math.min(analysis.foodProbability, 1.0)
    
    return analysis
  }
  
  // Kontextuell ordstrukturanalys f√∂r att gissa om n√•got √§r mat
  analyzeWordStructure(name) {
    const analysis = {
      isFoodLike: false,
      reasons: []
    }
    
    if (!name || name.length < 3) return analysis
    
    const lowerName = name.toLowerCase()
    
    // Svenska matvarusuffix
    const foodSuffixes = ['k√∂tt', 'fisk', 'mj√∂lk', 'br√∂d', 'ost', 'juice', 'olja', 'gryn', 'mj√∂l']
    if (foodSuffixes.some(suffix => lowerName.endsWith(suffix))) {
      analysis.isFoodLike = true
      analysis.reasons.push('har matsuffix')
    }
    
    // Svenska matvaruprefix
    const foodPrefixes = ['fisk', 'k√∂tt', 'frukt', 'gr√∂nt', 'mejeri']
    if (foodPrefixes.some(prefix => lowerName.startsWith(prefix))) {
      analysis.isFoodLike = true
      analysis.reasons.push('har matprefix')
    }
    
    // Sammansatta ord med matvardelar
    const foodParts = ['√§pple', 'k√∂tt', 'mj√∂lk', 'ost', 'br√∂d', 'fisk', 'kyckling']
    const words = lowerName.split(/[\s-]+/)
    if (words.some(word => foodParts.includes(word))) {
      analysis.isFoodLike = true
      analysis.reasons.push('inneh√•ller matvarsdel')
    }
    
    // Typiska svenska matvaruord-m√∂nster
    if (lowerName.match(/^[a-z√•√§√∂]{4,15}$/)) {
      // Enkla ord utan siffror - ofta matvaror
      if (!lowerName.match(/(disk|st√§d|kemisk|plast|metall|elektronik)/)) {
        analysis.isFoodLike = true
        analysis.reasons.push('enkelt svenskt ord')
      }
    }
    
    // Dubbla vokaler (svenska m√∂nster)
    if (lowerName.match(/[aeiou√•√§√∂]{2,}/)) {
      analysis.isFoodLike = true
      analysis.reasons.push('dubbla vokaler')
    }
    
    // Typiska svenska slutljud
    if (lowerName.match(/(ning|het|skap|dom)$/)) {
      analysis.isFoodLike = false // Dessa √§r s√§llan mat
    } else if (lowerName.match(/(or|ar|er|ad|at)$/)) {
      analysis.isFoodLike = true
      analysis.reasons.push('svenskt ordslut')
    }
    
    return analysis
  }

  cleanProductName(name) {
    if (!name) return ''
    
    // F√∂rst korrigera OCR-fel
    let cleaned = this.correctOCRErrors(name)
    
    // Ta bort vanliga kvitto-prefix/suffix och kvantiteter
    cleaned = cleaned
      .replace(/^\d+\s*x?\s*/i, '') // Ta bort "2x" eller "3 st" i b√∂rjan
      .replace(/\s*\d+\s*st\s*$/i, '') // Ta bort "2 st" i slutet  
      .replace(/\s*\d+\s*kg\s*$/i, '') // Ta bort "1 kg" i slutet
      .replace(/\s*\d+[.,]\d+\s*kg\s*$/i, '') // Ta bort "1,5 kg" i slutet
      .replace(/\s*\d+\s*g\s*$/i, '') // Ta bort "500 g" i slutet
      .replace(/\s*\d+\s*L\s*$/i, '') // Ta bort "1 L" i slutet
      .replace(/\s*\d+[.,]\d+\s*L\s*$/i, '') // Ta bort "1,5 L" i slutet
      .replace(/\s*\d+\s*cl\s*$/i, '') // Ta bort "33 cl" i slutet
      .replace(/\s*\d+\s*ml\s*$/i, '') // Ta bort "250 ml" i slutet
      .replace(/\s*\d+[.,]\d{2}\s*kr?\s*$/i, '') // Ta bort pris i slutet
      .replace(/\s*\*\s*\d+[.,]\d{2}\s*$/i, '') // Ta bort "* 19,90" format
      .replace(/[*\^\~\`]+/g, '') // Ta bort diverse symboler som kan komma fr√•n OCR
      .replace(/[\u00a0\u2000-\u200f\u2028-\u202f]/g, ' ') // Ta bort konstiga mellanslag
      .replace(/\s+/g, ' ') // Normalisera mellanslag
      .replace(/[^a-zA-Z√•√§√∂√Ö√Ñ√ñ\s\-]/g, '') // Ta bort konstiga tecken, beh√•ll bara bokst√§ver
      .trim()
      .toLowerCase() // Normalisera till gemener
      .replace(/^(\w)/, (match) => match.toUpperCase()) // Stor bokstav f√∂rst
    
    // Extra validering och korrektion
    if (cleaned.length < 2) return name // Returnera original om f√∂r kort
    
    return cleaned
  }

  extractQuantity(text) {
    // Extrahera kvantitet fr√•n olika kvittoformat
    const patterns = [
      // "2x Mj√∂lk" eller "3 x √Ñpplen"
      /(\d+)\s*x\s*/i,
      // "Gurka 2st" eller "2 st Tomat"
      /(?:^|\s)(\d+)\s*st(?:\s|$)/i,
      // "Potatis 1kg" eller "1,5 kg Fisk"
      /(\d+(?:[.,]\d+)?)\s*kg/i,
      // "Mj√∂lk 1L" eller "0,5 L Gr√§dde"
      /(\d+(?:[.,]\d+)?)\s*L/i,
      // "Juice 33cl" eller "250 ml Gr√§dde"
      /(\d+)\s*(?:cl|ml)/i,
      // "500g K√∂tt" 
      /(\d+)\s*g/i,
      // Fallback: nummer i b√∂rjan som "3 Bananer"
      /^(\d+)\s+[a-z√•√§√∂]/i
    ]
    
    for (const pattern of patterns) {
      const match = text.match(pattern)
      if (match) {
        const value = parseFloat(match[1].replace(',', '.'))
        console.log(`üî¢ Extraherad kvantitet: ${value} fr√•n "${text}"`)
        return value
      }
    }
    
    return null
  }
  
  extractUnit(text) {
    const lowerText = text.toLowerCase()
    
    // F√∂rst kolla explicita enheter i texten
    const unitPatterns = [
      { pattern: /\d+(?:[.,]\d+)?\s*(kg)/i, unit: 'kg' },
      { pattern: /\d+(?:[.,]\d+)?\s*(g)(?:\s|$)/i, unit: 'g' },
      { pattern: /\d+(?:[.,]\d+)?\s*(L)/i, unit: 'L' },
      { pattern: /\d+\s*(cl)/i, unit: 'cl' },
      { pattern: /\d+\s*(ml)/i, unit: 'ml' },
      { pattern: /\d+\s*(st)(?:\s|$)/i, unit: 'st' }
    ]
    
    // Kolla f√∂r explicita enheter f√∂rst
    for (const { pattern, unit } of unitPatterns) {
      if (pattern.test(text)) {
        console.log(`üìé Extraherad explicit enhet: ${unit} fr√•n "${text}"`)
        return unit
      }
    }
    
    // Om "2x" format, gissa r√§tt enhet baserat p√• produkttyp
    if (/\d+\s*x\s*/i.test(text)) {
      // V√§tskor ska vara i liter √§ven om det st√•r "2x Mj√∂lk"
      if (lowerText.includes('mj√∂lk') || lowerText.includes('juice') || 
          lowerText.includes('l√§sk') || lowerText.includes('vatten') ||
          lowerText.includes('gr√§dde') || lowerText.includes('filmj√∂lk') ||
          lowerText.includes('√∂l') || lowerText.includes('vin')) {
        console.log(`ü•õ V√§tska med 'x' format - anv√§nder L: "${text}"`)
        return 'L'
      }
      
      // K√∂tt/ost i kg
      if (lowerText.includes('k√∂tt') || lowerText.includes('ost') || 
          lowerText.includes('skinka') || lowerText.includes('korv') ||
          lowerText.includes('fisk') || lowerText.includes('kyckling')) {
        console.log(`ü•© K√∂tt/ost med 'x' format - anv√§nder kg: "${text}"`)
        return 'kg'
      }
      
      // Annars styck
      console.log(`üìé 'x' format - anv√§nder st: "${text}"`)
      return 'st'
    }
    
    return null
  }

  guessUnit(productName) {
    const name = productName.toLowerCase()
    
    // V√§tskor - ALLTID i liter
    if (name.includes('mj√∂lk') || name.includes('juice') || name.includes('l√§sk') || 
        name.includes('√∂l') || name.includes('vin') || name.includes('vatten') ||
        name.includes('gr√§dde') || name.includes('filmj√∂lk') || name.includes('yoghurt') ||
        name.includes('kefir') || name.includes('smoothie')) {
      console.log(`ü•õ Gissar enhet L f√∂r v√§tska: ${productName}`)
      return 'L'
    }
    
    // K√∂tt/fisk/ost - i kg (eller g f√∂r mindre m√§ngder)
    if (name.includes('k√∂tt') || name.includes('ost') || name.includes('skinka') || 
        name.includes('korv') || name.includes('fisk') || name.includes('kyckling') ||
        name.includes('n√∂t') || name.includes('fl√§sk') || name.includes('bacon') ||
        name.includes('lax') || name.includes('torsk') || name.includes('r√§ka')) {
      console.log(`ü•© Gissar enhet kg f√∂r k√∂tt/fisk: ${productName}`)
      return 'kg'
    }
    
    // L√∂sviktsvaror - frukt/gr√∂nsaker i kg
    if (name.includes('tomat') || name.includes('potatis') || name.includes('√§pple') || 
        name.includes('banan') || name.includes('gurka') || name.includes('morot') ||
        name.includes('l√∂k') || name.includes('paprika') || name.includes('avokado') ||
        name.includes('citron') || name.includes('apelsin') || name.includes('p√§ron') ||
        name.includes('sallad') || name.includes('broccoli') || name.includes('blomk√•l')) {
      console.log(`ü•¶ Gissar enhet kg f√∂r frukt/gr√∂nsaker: ${productName}`)
      return 'kg'
    }
    
    // Torrvaror som s√§ljs i kg
    if (name.includes('ris') || name.includes('pasta') || name.includes('mj√∂l') ||
        name.includes('socker') || name.includes('n√∂tter') || name.includes('mandel')) {
      console.log(`üåæ Gissar enhet kg f√∂r torrvara: ${productName}`)
      return 'kg'
    }
    
    // Br√∂d och bakvaror - per styck
    if (name.includes('br√∂d') || name.includes('kaka') || name.includes('bulle') ||
        name.includes('muffin') || name.includes('t√•rta') || name.includes('kex')) {
      console.log(`üçû Gissar enhet st f√∂r bakvara: ${productName}`)
      return 'st'
    }
    
    // Konserver och f√∂rpackningar - per styck
    if (name.includes('burk') || name.includes('konserv') || name.includes('f√∂rpackning') ||
        name.includes('t√•rta') || name.includes('pizza')) {
      console.log(`ü•´ Gissar enhet st f√∂r f√∂rpackning: ${productName}`)
      return 'st'
    }
    
    // √Ñgg - per styck eller f√∂rpackning
    if (name.includes('√§gg')) {
      console.log(`ü•ö Gissar enhet st f√∂r √§gg: ${productName}`)
      return 'st'
    }
    
    // Standard fallback
    console.log(`‚ùì Ok√§nd produkttyp - anv√§nder st som fallback: ${productName}`)
    return 'st'
  }

  isValidProductName(name) {
    if (!name || typeof name !== 'string') return false
    
    const trimmed = name.trim()
    
    // Grundl√§ggande l√§ngdkontroll - mer gener√∂s
    if (trimmed.length < 2 || trimmed.length > 50) return false
    
    // M√•ste inneh√•lla minst 2 bokst√§ver
    const letterCount = (trimmed.match(/[a-zA-Z√•√§√∂√Ö√Ñ√ñ]/g) || []).length
    if (letterCount < 2) return false
    
    // F√•r inte bara vara ett pris
    if (/^\d+[.,]\d{2}$/.test(trimmed)) return false
    
    // F√•r inte vara bara siffror
    if (/^\d+$/.test(trimmed)) return false
    
    // F√•r inte vara bara symboler/mellanslag
    if (!/[a-zA-Z√•√§√∂√Ö√Ñ√ñ]/.test(trimmed)) return false
    
    // Extrema fall - bara repeterade bokst√§ver
    const lowerName = trimmed.toLowerCase().replace(/\s/g, '')
    if (/^([a-z√•√§√∂])\1+$/.test(lowerName) && lowerName.length > 2) {
      console.log(`üö´ Filtrerar bort repeterad nonsens: "${name}"`)
      return false
    }
    
    // L√•t tr√§ningsdatan g√∂ra resten av jobbet!
    return true
  }
  
  // UTVIDGAD s√§kerhetskontroll f√∂r att identifiera definitivt INTE matvaror
  isDefinitelyNotFood(productName) {
    if (!productName) return true
    
    const name = productName.toLowerCase().trim()
    
    // Betalningsrelaterat
    const paymentKeywords = [
      'mottaget', 'kontokort', 'bankkort', 'kort', 'card', 'swish', 'kontant', 'cash',
      'betalning', 'payment', 'betalt', 'paid', 'kredit', 'debit', 'visa', 'mastercard'
    ]
    
    // ICA-tj√§nster och bonusprogram
    const serviceKeywords = [
      'ica aptiten', 'ica banken', 'ica f√∂rs√§kring', 'stamkund', 'medlem',
      'bonuscheck', 'kvittolotteri', 'kundklubb', 'bonus check', 'aptiten'
    ]
    
    // Kvittoinformation
    const receiptKeywords = [
      'organisationsnummer', 'org nr', 'telefon', 'tel', 'adress', 'address',
      'kvitto', 'receipt', 'tack f√∂r', 'thank you', 'v√§lkommen √•ter',
      'moms', 'vat', 'totalt', 'total', 'summa', 'sum', 'att betala'
    ]
    
    // Kampanjer och erbjudanden
    const promotionKeywords = [
      'kampanj', 'erbjudande', 'rabatt', 'spar', 'bonus', 'save', 'offer',
      'rea', 'sale', 'extrapris', 'medlem pris'
    ]
    
    // Icke-matvaror som ofta finns p√• kvitton
    const nonFoodItems = [
      'p√•se', 'plastp√•se', 'kasse', 'b√§rare', 'pappersp√•se', 'shopping bag',
      'diskmedel', 'tv√§ttmedel', 'st√§d', 'reng√∂ring', 'kemikalie', 'spray',
      'tandk r√§m', 'tandborste', 'schampo', 'tv√•l', 'deodorant', 'shampoo',
      'batterier', 'gl√∂dlampa', 'tidning', 'magasin', 'present', 'g√•va',
      'blommor', 'v√§xt', 'leksak', 'cigaretter', 'tobak', 'lighter',
      'verktyg', 'skruv', 'spik', 'j√§rn', 'plast', 'metall', 'elektronik',
      'parfym', 'kosmetika', 'nagellack', 'smink', 'mascara', 'l√§ppstift',
      'kondomer', 'preventivmedel', 'medicin', 'vit min', 'supplement',
      'folie', 'plastfolie', 'bakpapper', 'servetter', 'toalettpapper',
      'k√∂ksrullar', 'disktrasa', 'tv√§ttlappar'
    ]
    
    const allKeywords = [...paymentKeywords, ...serviceKeywords, ...receiptKeywords, ...promotionKeywords, ...nonFoodItems]
    
    // Kolla om n√•got nyckelord finns i produktnamnet
    if (allKeywords.some(keyword => name.includes(keyword))) {
      return true
    }
    
    // Kolla f√∂r bara siffror eller organisationsnummer-liknande
    if (/^\d{3}\s*\d{2}\s*\d{5}$/.test(name)) return true // Organisationsnummer
    if (/^\d{4,}$/.test(name)) return true // L√•nga siffror
    if (/^\d+[.,]\d{2}\s*kr?$/.test(name)) return true // Bara priser
    if (/^ref[\s.]*\d+/i.test(name)) return true // Referensnummer
    
    // Kolla f√∂r f√∂r korta eller konstiga str√§ngar
    if (name.length < 2) return true
    if (/^[^a-z√•√§√∂]*$/.test(name)) return true // Ingen bokstav alls
    if (/^[-=_*+]{2,}$/.test(name)) return true // Bara symboler
    
    return false
  }

  // Extrahera k√§rn-produktnamnet genom att ta bort priser, kvantiteter och symboler
  extractCoreProductName(name) {
    if (!name) return ''
    
    let cleaned = name.trim()
    
    // Ta bort ledande symboler som * eller -
    cleaned = cleaned.replace(/^[*\-+#@&%]+\s*/, '')
    
    // Ta bort pris-m√∂nster (X.XX kr, X,XX kr, XX.XX, etc.)
    cleaned = cleaned.replace(/\s*\d+[.,]\d{1,2}\s*(kr|sek|:\-|$)/gi, '')
    
    // Ta bort enbart siffror i slutet (priser utan kr)
    cleaned = cleaned.replace(/\s*\d+[.,]\d{2}\s*$/, '')
    
    // Ta bort kvantitets-m√∂nster (2st, 1kg, 3x, 25t, etc.)
    cleaned = cleaned.replace(/\s*\d+\s*(st|kg|g|l|ml|cl|x|t|pack|p√•se|burk)\b/gi, '')
    
    // Ta bort procent och specialtecken
    cleaned = cleaned.replace(/[%#@&*+\-=<>{}\[\]\|\\~/]+/g, ' ')
    
    // Ta bort extra siffror och konstiga sekvenser
    cleaned = cleaned.replace(/\s*\d{3,}\s*/g, ' ') // L√•nga siffersekvenser
    
    // Normalisera mellanslag och trim
    cleaned = cleaned.replace(/\s+/g, ' ').trim()
    
    // Om resultatet √§r f√∂r kort, beh√•ll mer av originalet
    if (cleaned.length < 3 && name.length > 3) {
      // F√∂rs√∂k enklare rensning
      cleaned = name.replace(/^[*\-+]+\s*/, '')
                    .replace(/\s*\d+[.,]\d{2}.*$/, '')
                    .replace(/[%*\-+=]/g, ' ')
                    .replace(/\s+/g, ' ')
                    .trim()
    }
    
    return cleaned || name.trim()
  }
  
  // Extrahera kvantitet fr√•n produktnamn
  extractQuantityFromName(name) {
    // Leta efter m√∂nster som "2st", "1kg", "3x", etc.
    const quantityMatch = name.match(/(\d+)\s*(st|kg|g|l|ml|cl|x|t|pack|p√•se|burk)/i)
    if (quantityMatch) {
      return parseInt(quantityMatch[1])
    }
    
    // Leta efter siffror f√∂re produktnamnet
    const frontNumberMatch = name.match(/^[*\-+]*\s*(\d+)\s*\w/)
    if (frontNumberMatch) {
      return parseInt(frontNumberMatch[1])
    }
    
    return 1 // Standard kvantitet
  }

  cleanProductName(name) {
    return name.trim()
      .replace(/[^a-zA-Z√•√§√∂√Ö√Ñ√ñ\s\-]/g, '') // Ta bort konstiga tecken
      .replace(/\s+/g, ' ') // Normalisera mellanslag
      .trim()
  }
  
  async cleanup() {
    if (this.worker) {
      await this.worker.terminate()
      this.worker = null
      console.log('üßπ OCR-worker st√§ngd')
    }
  }
}

// Singleton instance
let receiptProcessor = null

export async function processReceiptImage(imageElement) {
  if (!receiptProcessor) {
    receiptProcessor = new ReceiptProcessor()
  }
  
  // Anv√§nd bara den ursprungliga metoden som fungerade
  return await receiptProcessor.processReceipt(imageElement)
}

// Fallback till standard-metod om robust misslyckas
export async function processReceiptImageStandard(imageElement) {
  if (!receiptProcessor) {
    receiptProcessor = new ReceiptProcessor()
  }
  
  return await receiptProcessor.processReceipt(imageElement)
}

export async function cleanupReceiptProcessor() {
  if (receiptProcessor) {
    await receiptProcessor.cleanup()
    receiptProcessor = null
  }
}