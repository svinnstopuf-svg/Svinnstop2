// API f√∂r att h√§mta popul√§ra recept fr√•n internet
// Anv√§nder TheMealDB API (gratis, ingen API-nyckel kr√§vs)

const CACHE_KEY = 'svinnstop_cached_recipes'
const CACHE_VERSION = 'v2' // √ñka denna f√∂r att ogiltigf√∂rklara gammal cache
const CACHE_DURATION = 24 * 60 * 60 * 1000 // 24 timmar

// √ñvers√§ttning fr√•n engelska till svenska
const translateIngredient = (ingredient) => {
  const translations = {
    'chicken': 'kyckling',
    'chicken breast': 'kycklingfil√©',
    'beef': 'n√∂tk√∂tt',
    'ground beef': 'k√∂ttf√§rs',
    'pork': 'fl√§sk',
    'fish': 'fisk',
    'salmon': 'lax',
    'shrimp': 'r√§kor',
    'egg': '√§gg',
    'eggs': '√§gg',
    'milk': 'mj√∂lk',
    'cream': 'gr√§dde',
    'heavy cream': 'vispgr√§dde',
    'butter': 'sm√∂r',
    'cheese': 'ost',
    'parmesan': 'parmesan',
    'mozzarella': 'mozzarella',
    'pasta': 'pasta',
    'spaghetti': 'spaghetti',
    'rice': 'ris',
    'potato': 'potatis',
    'potatoes': 'potatis',
    'tomato': 'tomat',
    'tomatoes': 'tomater',
    'tomato paste': 'tomatpur√©',
    'onion': 'l√∂k',
    'onions': 'l√∂k',
    'garlic': 'vitl√∂k',
    'garlic clove': 'vitl√∂ksklyfta',
    'carrot': 'morot',
    'carrots': 'mor√∂tter',
    'broccoli': 'broccoli',
    'pepper': 'paprika',
    'bell pepper': 'paprika',
    'red pepper': 'r√∂d paprika',
    'mushroom': 'champinjoner',
    'mushrooms': 'champinjoner',
    'bread': 'br√∂d',
    'flour': 'mj√∂l',
    'sugar': 'socker',
    'salt': 'salt',
    'pepper': 'peppar',
    'black pepper': 'svartpeppar',
    'oil': 'olja',
    'olive oil': 'olivolja',
    'vegetable oil': 'matolja',
    'water': 'vatten',
    'lemon': 'citron',
    'lime': 'lime',
    'avocado': 'avokado',
    'banana': 'banan',
    'apple': '√§pple',
    'spinach': 'spenat',
    'lettuce': 'sallad',
    'cucumber': 'gurka',
    'soy sauce': 'soja',
    'ginger': 'ingef√§ra',
    'parsley': 'persilja',
    'basil': 'basilika',
    'oregano': 'oregano',
    'thyme': 'timjan',
    'bacon': 'bacon',
    'ham': 'skinka',
    'yogurt': 'yoghurt',
    'honey': 'honung',
    'nuts': 'n√∂tter',
    'coconut': 'kokos',
    'zucchini': 'zucchini',
    'aubergine': 'aubergine',
    'eggplant': 'aubergine'
  }
  
  const lower = ingredient.toLowerCase().trim()
  
  // Exakt matchning f√∂rst
  if (translations[lower]) {
    return translations[lower]
  }
  
  // Delvis matchning
  for (const [eng, swe] of Object.entries(translations)) {
    if (lower.includes(eng)) {
      return swe
    }
  }
  
  return ingredient
}

// √ñvers√§tt m√•tt till svenska
const translateMeasure = (measure) => {
  const translations = {
    'cup': 'dl',
    'cups': 'dl',
    'tablespoon': 'msk',
    'tablespoons': 'msk',
    'tbsp': 'msk',
    'teaspoon': 'tsk',
    'teaspoons': 'tsk',
    'tsp': 'tsk',
    'oz': 'g',
    'ounce': 'g',
    'ounces': 'g',
    'lb': 'kg',
    'pound': 'kg',
    'pounds': 'kg',
    'ml': 'ml',
    'g': 'g',
    'kg': 'kg',
    'pinch': 'nypa',
    'pinches': 'nypor',
    'slice': 'skiva',
    'slices': 'skivor',
    'clove': 'klyfta',
    'cloves': 'klyftor',
    'piece': 'stycke',
    'pieces': 'stycken'
  }
  
  const lower = measure.toLowerCase().trim()
  return translations[lower] || measure
}

// Konvertera m√•tt till numeriska v√§rden
const parseMeasurement = (measureStr) => {
  if (!measureStr || measureStr.trim() === '') return { quantity: 1, unit: 'st' }
  
  const str = measureStr.trim().toLowerCase()
  
  // Hantera br√•k (1/2, 1/4, etc)
  const fractionMatch = str.match(/(\d+)\/(\d+)/)
  if (fractionMatch) {
    const quantity = parseFloat(fractionMatch[1]) / parseFloat(fractionMatch[2])
    const unitMatch = str.replace(/[\d\s.\/]+/g, '').trim()
    const unit = unitMatch ? translateMeasure(unitMatch) : 'st'
    return { quantity, unit }
  }
  
  // F√∂rs√∂k extrahera tal
  const numberMatch = str.match(/(\d+\.?\d*|\d*\.?\d+)/)
  const quantity = numberMatch ? parseFloat(numberMatch[1]) : 1
  
  // Extrahera enhet
  const unitMatch = str.replace(/[\d\s.\/]+/g, '').trim()
  const unit = unitMatch ? translateMeasure(unitMatch) : 'st'
  
  return { quantity, unit }
}

// √ñvers√§tt sv√•righetsgrad
const getSwedishDifficulty = (ingredientCount) => {
  if (ingredientCount <= 6) return 'L√§tt'
  if (ingredientCount <= 10) return 'Medel'
  return 'Sv√•r'
}

// √ñvers√§tt receptnamn till svenska och g√∂r dem aptitliga
const translateRecipeName = (englishName, category, area) => {
  // Specifika √∂vers√§ttningar f√∂r popul√§ra recept
  const translations = {
    // Kycklingr√§tter
    'Teriyaki Chicken Casserole': 'Saftig Teriyaki-Kycklinggryta',
    'Chicken Couscous': 'Kryddig Kycklingcouscous med Gr√∂nsaker',
    'Chicken Handi': 'Indisk Kyckling i Kryddig S√•s',
    'Katsu Chicken curry': 'Japansk Katsu-Curry med Kyckling',
    'Kung Pao Chicken': 'Kinesisk Kung Pao Kyckling',
    'Chicken Fajitas': 'Mexikanska Kycklingfajitas',
    'Chicken Alfredo Primavera': 'Kr√§mig Kycklingpasta Alfredo',
    'Jerk Chicken': 'Karibisk Jerk-Marinerad Kyckling',
    
    // Pasta
    'Spaghetti Bolognese': 'Klassisk Italiensk K√∂ttf√§rss√•s',
    'Carbonara': 'Kr√§mig Pasta Carbonara med Bacon',
    'Lasagne': 'Ugnsgratinerad Italiensk Lasagne',
    'Rigatoni with fennel and mascarpone': 'Kr√§mig Rigatoni med F√§nk√•l',
    'Pasta and Beans': 'Italiensk Pasta e Fagioli',
    'Seafood fideu√†': 'Spansk Skaldjurspasta',
    
    // N√∂tk√∂tt
    'Beef and Mustard Pie': 'Mustig N√∂tk√∂ttspaj med Senap',
    'Beef Wellington': 'Festlig Oxfil√© i Sm√∂rdeg',
    'Beef Stroganoff': 'Kr√§mig Beef Stroganoff',
    'Beef Brisket Pot Roast': 'L√•ngstek Oxbringa',
    'Massaman Beef curry': 'Thail√§ndsk Massaman-Curry med N√∂tk√∂tt',
    
    // Fisk & skaldjur
    'Salmon Prawn Risotto': 'Kr√§mig Lax- och R√§krisotto',
    'Grilled Portuguese sardines': 'Grillad Sardiner p√• Portugisiskt Vis',
    'Tuna Nicoise': 'Fransk Tonnfiskssallad Ni√ßoise',
    'Salmon Avocado Salad': 'F√§rsk Laxsallad med Avokado',
    'Mediterranean Pasta Salad': 'Medelhavspasta med Tonfisk',
    
    // Thaimat
    'Thai Green Curry': 'Thail√§ndsk Gr√∂n Curry',
    'Pad Thai': 'Klassisk Pad Thai med R√§kor',
    'Thai Red Curry': 'Thail√§ndsk R√∂d Curry',
    
    // Vegetariskt
    'Mushroom & Chestnut Rotolo': 'Italiensk Svamprulad',
    'Vegetarian Casserole': 'Vegetarisk Gr√∂nsaksgryta',
    'Vegan Lasagne': 'Vegansk Lasagne med Gr√∂nsaker',
    'Spicy Arrabiata Penne': 'Het Penne Arrabiata',
    
    // Frukost
    'Pancakes': 'Fluffiga Amerikanska Pannkakor',
    'Breakfast Potatoes': 'Stekt Frukostpotatis med L√∂k',
    'Full English Breakfast': 'Engelsk Frukost',
    
    // Dessert
    'Apple Frangipan Tart': 'Fransk √Ñppelpaj med Mandel',
    'Bakewell tart': 'Engelsk Mandelkaka Bakewell',
    'Chocolate Gateau': 'Rik Fransk Chokladt√•rta',
    'Banana Pancakes': 'S√∂ta Bananpannkakor',
    'Apam balik': 'Malaysisk Pannkaka med Jord√∂tter',
    'Apple & Blackberry Crumble': '√Ñppel- och Bj√∂rnb√§rspaj med Smuldeg'
  }
  
  // Returnera √∂vers√§ttning om den finns
  if (translations[englishName]) {
    return translations[englishName]
  }
  
  // Annars, anv√§nd originalnamnet
  return englishName
}

// H√§mta recept fr√•n TheMealDB API
export async function fetchPopularRecipes(limit = 20) {
  try {
    // Kolla cache f√∂rst
    const cached = getCachedRecipes()
    if (cached && cached.length > 0) {
      console.log('üì¶ Anv√§nder cachade recept fr√•n internet')
      return cached.slice(0, limit)
    }
    
    console.log('üåê H√§mtar popul√§ra recept fr√•n internet...')
    
    // H√§mta flera kategorier f√∂r variation
    const categories = ['Chicken', 'Beef', 'Pasta', 'Seafood', 'Vegetarian', 'Breakfast', 'Dessert']
    const allRecipes = []
    const seenIds = new Set() // F√∂r att undvika dubbletter
    
    for (const category of categories) {
      try {
        const response = await fetch(`https://www.themealdb.com/api/json/v1/1/filter.php?c=${category}`)
        const data = await response.json()
        
        if (data.meals) {
          // Ta 3 recept fr√•n varje kategori
          const categoryRecipes = data.meals.slice(0, 3)
          
          // H√§mta fullst√§ndig info f√∂r varje recept
          for (const meal of categoryRecipes) {
            // Skippa om vi redan har detta recept
            if (seenIds.has(meal.idMeal)) {
              continue
            }
            
            try {
              const detailResponse = await fetch(`https://www.themealdb.com/api/json/v1/1/lookup.php?i=${meal.idMeal}`)
              const detailData = await detailResponse.json()
              
              if (detailData.meals && detailData.meals[0]) {
                seenIds.add(meal.idMeal)
                allRecipes.push(convertToSwedishRecipe(detailData.meals[0]))
              }
              
              // Liten f√∂rdr√∂jning f√∂r att inte √∂verbelasta API:et
              await new Promise(resolve => setTimeout(resolve, 100))
            } catch (err) {
              console.warn(`Kunde inte h√§mta detaljer f√∂r ${meal.strMeal}:`, err)
            }
          }
        }
      } catch (err) {
        console.warn(`Kunde inte h√§mta recept fr√•n kategori ${category}:`, err)
      }
    }
    
    // Cacha resultatet
    if (allRecipes.length > 0) {
      cacheRecipes(allRecipes)
      console.log(`‚úÖ H√§mtade ${allRecipes.length} recept fr√•n internet`)
      return allRecipes.slice(0, limit)
    }
    
    // Om inga recept h√§mtades, returnera fallback
    console.warn('‚ö†Ô∏è Inga recept kunde h√§mtas, anv√§nder fallback-recept')
    return getFallbackRecipes()
    
  } catch (error) {
    console.error('‚ùå Kunde inte h√§mta recept fr√•n internet:', error)
    return getFallbackRecipes()
  }
}

// Konvertera TheMealDB-format till v√•rt svenska format
function convertToSwedishRecipe(meal) {
  const ingredients = []
  
  // TheMealDB har ingredienser som strIngredient1, strIngredient2, etc.
  for (let i = 1; i <= 20; i++) {
    const ingredient = meal[`strIngredient${i}`]
    const measure = meal[`strMeasure${i}`]
    
    if (ingredient && ingredient.trim() !== '') {
      const { quantity, unit } = parseMeasurement(measure)
      
      ingredients.push({
        name: translateIngredient(ingredient),
        quantity: quantity,
        unit: unit
      })
    }
  }
  
  // F√∂rkorta instruktioner om de √§r f√∂r l√•nga
  let instructions = meal.strInstructions || 'F√∂lj receptets instruktioner.'
  if (instructions.length > 500) {
    instructions = instructions.substring(0, 497) + '...'
  }
  
  // Generera tags baserat p√• kategori och omr√•de
  const tags = []
  if (meal.strCategory) tags.push(meal.strCategory.toLowerCase())
  if (meal.strArea && meal.strArea !== 'Unknown') tags.push(meal.strArea.toLowerCase())
  
  // L√§gg till svenska tags baserat p√• ingredienser
  const ingredientNames = ingredients.map(i => i.name.toLowerCase()).join(' ')
  if (ingredientNames.includes('kyckling')) tags.push('kyckling')
  if (ingredientNames.includes('vegetar') || meal.strCategory === 'Vegetarian') tags.push('vegetariskt')
  if (ingredientNames.includes('pasta')) tags.push('pasta')
  if (ingredientNames.includes('snabb') || ingredients.length <= 6) tags.push('snabbt')
  
  return {
    id: `api-${meal.idMeal}`,
    name: translateRecipeName(meal.strMeal, meal.strCategory, meal.strArea),
    servings: 4,
    ingredients: ingredients,
    instructions: instructions,
    cookingTime: estimateCookingTime(ingredients.length),
    difficulty: getSwedishDifficulty(ingredients.length),
    tags: tags.slice(0, 4), // Max 4 tags
    category: meal.strCategory || 'Other',
    area: meal.strArea || 'International',
    image: meal.strMealThumb,
    source: 'TheMealDB',
    sourceUrl: meal.strSource || `https://www.themealdb.com/meal/${meal.idMeal}`
  }
}

// Uppskatta tillagningstid baserat p√• antal ingredienser
function estimateCookingTime(ingredientCount) {
  if (ingredientCount <= 5) return '15-20 minuter'
  if (ingredientCount <= 8) return '25-35 minuter'
  if (ingredientCount <= 12) return '40-50 minuter'
  return '60+ minuter'
}

// Cache-funktioner
function getCachedRecipes() {
  try {
    const cached = localStorage.getItem(CACHE_KEY)
    if (!cached) return null
    
    const { recipes, timestamp, version } = JSON.parse(cached)
    const now = Date.now()
    
    // Kolla om cache √§r f√∂r gammal eller fel version
    if (version !== CACHE_VERSION || now - timestamp > CACHE_DURATION) {
      localStorage.removeItem(CACHE_KEY)
      return null
    }
    
    return recipes
  } catch (error) {
    console.warn('Kunde inte l√§sa cache:', error)
    return null
  }
}

function cacheRecipes(recipes) {
  try {
    const cacheData = {
      recipes: recipes,
      timestamp: Date.now(),
      version: CACHE_VERSION
    }
    localStorage.setItem(CACHE_KEY, JSON.stringify(cacheData))
    console.log('üíæ Cachade recept f√∂r framtida anv√§ndning')
  } catch (error) {
    console.warn('Kunde inte cacha recept:', error)
  }
}

// Rensa cache manuellt (kan anv√§ndas f√∂r att tvinga uppdatering)
export function clearRecipeCache() {
  localStorage.removeItem(CACHE_KEY)
  console.log('üóëÔ∏è Receptcache rensad')
}

// Fallback-recept om API misslyckas (anv√§nd befintliga svenska recept)
function getFallbackRecipes() {
  return [
    {
      id: 'fallback-1',
      name: 'Kr√§mig Pasta Carbonara',
      servings: 4,
      ingredients: [
        { name: 'pasta', quantity: 400, unit: 'g' },
        { name: 'bacon', quantity: 200, unit: 'g' },
        { name: '√§gg', quantity: 3, unit: 'stycken' },
        { name: 'parmesan', quantity: 100, unit: 'g' },
        { name: 'svartpeppar', quantity: 1, unit: 'tsk' }
      ],
      instructions: 'Koka pastan enligt anvisning. Stek bacon knaprig. Vispa √§gg med riven parmesan. N√§r pastan √§r klar, h√§ll av vattnet och blanda direkt med √§ggblandningen (pastan ska vara het s√• √§ggen blir kr√§miga). V√§nd ner bacon. Krydda med mycket svartpeppar.',
      cookingTime: '20 minuter',
      difficulty: 'L√§tt',
      tags: ['pasta', 'snabbt', 'klassiskt', 'italienskt']
    },
    {
      id: 'fallback-2',
      name: 'Kycklingwok med Gr√∂nsaker',
      servings: 4,
      ingredients: [
        { name: 'kycklingfil√©', quantity: 500, unit: 'g' },
        { name: 'broccoli', quantity: 300, unit: 'g' },
        { name: 'paprika', quantity: 2, unit: 'stycken' },
        { name: 'soja', quantity: 3, unit: 'msk' },
        { name: 'vitl√∂k', quantity: 2, unit: 'klyftor' },
        { name: 'ingef√§ra', quantity: 1, unit: 'msk' },
        { name: 'ris', quantity: 300, unit: 'g' }
      ],
      instructions: 'Koka ris. Sk√§r kyckling i bitar och bryn i varm wokpanna. Tills√§tt hackad vitl√∂k och ingef√§ra. L√§gg i gr√∂nsakerna och wokar 4-5 min. H√§ll i soja och wokar ytterligare 2 min. Servera √∂ver ris.',
      cookingTime: '25 minuter',
      difficulty: 'Medel',
      tags: ['kyckling', 'asiatiskt', 'h√§lsosamt', 'wok']
    },
    {
      id: 'fallback-3',
      name: 'Klassisk K√∂ttf√§rss√•s',
      servings: 4,
      ingredients: [
        { name: 'k√∂ttf√§rs', quantity: 500, unit: 'g' },
        { name: 'krossade tomater', quantity: 400, unit: 'g' },
        { name: 'l√∂k', quantity: 1, unit: 'stycke' },
        { name: 'morot', quantity: 2, unit: 'stycken' },
        { name: 'vitl√∂k', quantity: 2, unit: 'klyftor' },
        { name: 'tomatpur√©', quantity: 2, unit: 'msk' },
        { name: 'pasta', quantity: 400, unit: 'g' }
      ],
      instructions: 'Bryn k√∂ttf√§rsen i en stekpanna. Tills√§tt hackad l√∂k, mor√∂tter och vitl√∂k. Stek n√•gra minuter. H√§ll i tomatpur√©, krossade tomater och krydda med oregano, basilika, salt och peppar. L√•t puttra 20-30 min. Servera med nykokta pasta.',
      cookingTime: '45 minuter',
      difficulty: 'L√§tt',
      tags: ['k√∂ttf√§rs', 'pasta', 'barnv√§nligt', 'klassiskt']
    }
  ]
}

// H√§mta ett slumpm√§ssigt recept
export async function fetchRandomRecipe() {
  try {
    const response = await fetch('https://www.themealdb.com/api/json/v1/1/random.php')
    const data = await response.json()
    
    if (data.meals && data.meals[0]) {
      return convertToSwedishRecipe(data.meals[0])
    }
  } catch (error) {
    console.error('Kunde inte h√§mta slumpm√§ssigt recept:', error)
  }
  
  return null
}
